[{"/home/michael/Desktop/Projects/simple-budget-app/simplebudget-web-client/src/components/Signup.js":"1","/home/michael/Desktop/Projects/simple-budget-app/simplebudget-web-client/src/App.js":"2","/home/michael/Desktop/Projects/simple-budget-app/simplebudget-web-client/src/components/EditBudget.js":"3","/home/michael/Desktop/Projects/simple-budget-app/simplebudget-web-client/src/components/NewBudget.js":"4","/home/michael/Desktop/Projects/simple-budget-app/simplebudget-web-client/src/index.js":"5","/home/michael/Desktop/Projects/simple-budget-app/simplebudget-web-client/src/components/AddExpense.js":"6","/home/michael/Desktop/Projects/simple-budget-app/simplebudget-web-client/src/components/Login.js":"7","/home/michael/Desktop/Projects/simple-budget-app/simplebudget-web-client/src/components/ManageBudgets.js":"8","/home/michael/Desktop/Projects/simple-budget-app/simplebudget-web-client/src/components/modals/ConfirmDeleteCategory.js":"9","/home/michael/Desktop/Projects/simple-budget-app/simplebudget-web-client/src/reportWebVitals.js":"10","/home/michael/Desktop/Projects/simple-budget-app/simplebudget-web-client/src/components/Settings.js":"11","/home/michael/Desktop/Projects/simple-budget-app/simplebudget-web-client/src/components/EditExpenditure.js":"12","/home/michael/Desktop/Projects/simple-budget-app/simplebudget-web-client/src/components/Dashboard.js":"13","/home/michael/Desktop/Projects/simple-budget-app/simplebudget-web-client/src/components/Account.js":"14","/home/michael/Desktop/Projects/simple-budget-app/simplebudget-web-client/src/components/modals/ConfirmDeleteBudgetModal.js":"15","/home/michael/Desktop/Projects/simple-budget-app/simplebudget-web-client/src/components/Navbar.js":"16","/home/michael/Desktop/Projects/simple-budget-app/simplebudget-web-client/src/components/FinancialProfile.js":"17","/home/michael/Desktop/Projects/simple-budget-app/simplebudget-web-client/src/components/ViewSpending.js":"18","/home/michael/Desktop/Projects/simple-budget-app/simplebudget-web-client/src/components/modals/ConfirmDeleteExpenseModal.js":"19","/home/michael/Desktop/Projects/simple-budget-app/simplebudget-web-client/src/components/modals/ConfirmDeleteAccountModal.js":"20","/home/michael/Desktop/Projects/simple-budget-app/simplebudget-web-client/src/components/AccountDetails.js":"21","/home/michael/Desktop/Projects/simple-budget-app/simplebudget-web-client/src/components/AccountMenu.js":"22","/home/michael/Desktop/Projects/simple-budget-app/simplebudget-web-client/src/components/AddBill.js":"23","/home/michael/Desktop/Projects/simple-budget-app/simplebudget-web-client/src/components/EditAccount.js":"24"},{"size":6718,"mtime":1612630511290,"results":"25","hashOfConfig":"26"},{"size":13565,"mtime":1612118840401,"results":"27","hashOfConfig":"26"},{"size":9798,"mtime":1610765366836,"results":"28","hashOfConfig":"26"},{"size":4853,"mtime":1610420397203,"results":"29","hashOfConfig":"26"},{"size":536,"mtime":1607203421724,"results":"30","hashOfConfig":"26"},{"size":4948,"mtime":1609297003940,"results":"31","hashOfConfig":"26"},{"size":1860,"mtime":1610496694544,"results":"32","hashOfConfig":"26"},{"size":1909,"mtime":1612047662827,"results":"33","hashOfConfig":"26"},{"size":582,"mtime":1610503374948,"results":"34","hashOfConfig":"26"},{"size":356,"mtime":1607203421724,"results":"35","hashOfConfig":"26"},{"size":1088,"mtime":1607203421724,"results":"36","hashOfConfig":"26"},{"size":4952,"mtime":1610848041947,"results":"37","hashOfConfig":"26"},{"size":3375,"mtime":1609365903685,"results":"38","hashOfConfig":"26"},{"size":666,"mtime":1612047110656,"results":"39","hashOfConfig":"26"},{"size":1132,"mtime":1610765536091,"results":"40","hashOfConfig":"26"},{"size":1133,"mtime":1608512039091,"results":"41","hashOfConfig":"26"},{"size":1995,"mtime":1612128471154,"results":"42","hashOfConfig":"26"},{"size":9126,"mtime":1610906904835,"results":"43","hashOfConfig":"26"},{"size":1142,"mtime":1610853200851,"results":"44","hashOfConfig":"26"},{"size":1422,"mtime":1609004236192,"results":"45","hashOfConfig":"26"},{"size":2239,"mtime":1612127912333,"results":"46","hashOfConfig":"26"},{"size":564,"mtime":1612047261701,"results":"47","hashOfConfig":"26"},{"size":2575,"mtime":1612047290969,"results":"48","hashOfConfig":"26"},{"size":7561,"mtime":1612128551795,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1b9p1l1",{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"57"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"57"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"66"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"70"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"66"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"77"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"57"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"77"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"101","messages":"102","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/michael/Desktop/Projects/simple-budget-app/simplebudget-web-client/src/components/Signup.js",[],"/home/michael/Desktop/Projects/simple-budget-app/simplebudget-web-client/src/App.js",["111"],"/home/michael/Desktop/Projects/simple-budget-app/simplebudget-web-client/src/components/EditBudget.js",["112","113"],"import React, { useState, useEffect } from \"react\"\nimport { useParams, useHistory } from \"react-router-dom\"\nimport {\n  Button,\n  Container,\n  Form,\n  Grid,\n  Header,\n  Icon,\n  Message,\n  Popup,\n  Segment,\n} from \"semantic-ui-react\"\nimport Breadcrumb from \"./Breadcrumb\"\nimport ConfirmDeleteCategory from \"./modals/ConfirmDeleteCategory\"\nimport ConfirmDeleteBudgetModal from \"./modals/ConfirmDeleteBudgetModal\"\nimport Cookies from \"js-cookie\"\n\nexport default function EditBudget({\n  user,\n  budgets,\n  setBudgets,\n  getBudget,\n  addNewCategory,\n  deleteCategory,\n  updateBudget,\n  deleteBudget,\n}) {\n  const [budget, setBudget] = useState([])\n  const [title, setTitle] = useState(\"\")\n  const [description, setDescription] = useState(\"\")\n  const [total, setTotal] = useState(0)\n  const [categories, setCategories] = useState([])\n  const [editedCategories, setEditedCategories] = useState([])\n  const [newCategories, setNewCategories] = useState([])\n  const [categoriesToDelete, setCategoriesToDelete] = useState([])\n  const [newCategoryTitle, setNewCategoryTitle] = useState(\"\")\n  const [newCategoryAmount, setNewCategoryAmount] = useState(\"\")\n  const [loading, setLoading] = useState(false)\n  const [error, setError] = useState(\"\")\n  const history = useHistory()\n  const { id } = useParams()\n\n  useEffect(() => {\n    getBudget(id)\n      .then((response) => response.json())\n      .then((data) => {\n        setBudget(data)\n        setTitle(data.title)\n        setDescription(data.description)\n        setTotal(Number(data.total))\n        setCategories(data.Categories)\n        setEditedCategories(data.Categories)\n      })\n      .catch((error) => setError(error))\n  }, [])\n\n  /**\n   * Reset state to initial\n   */\n  function reset() {\n    setTitle(budget.title)\n    setDescription(budget.description)\n    setTotal(budget.total)\n    setCategories(budget.Categories)\n    setEditedCategories(budget.Categories)\n    setNewCategories([])\n    setCategoriesToDelete([])\n    setNewCategoryTitle(\"\")\n    setNewCategoryAmount(\"\")\n    setError(\"\")\n  }\n\n  /**\n   * Add any new categories\n   * Delete any categories slated for delete\n   * Update budget properties\n   */\n  function handleSave() {\n    setLoading(true)\n    if (newCategories.length) {\n      for (let item of newCategories) {\n        addNewCategory(item)\n          .then((response) => response.json())\n          .then((data) => console.log(data))\n      }\n    }\n    if (categoriesToDelete.length) {\n      categoriesToDelete.forEach(async (id) => {\n        await deleteCategory(id)\n      })\n    }\n    const newCategoriesTotal = newCategories.reduce(\n      (acc, curr) => acc + Number(curr.amount),\n      0\n    )\n    const editedCategoriesTotal = editedCategories.reduce(\n      (acc, curr) => acc + Number(curr.amount),\n      0\n    )\n    const budgetTotal = newCategoriesTotal + editedCategoriesTotal\n    const payload = {\n      budget: {\n        title,\n        description,\n        total: budgetTotal,\n        userId: user.id,\n      },\n      categories: editedCategories,\n    }\n    updateBudget(budget.id, payload)\n      .then((response) => response.json())\n      .then((data) => {\n        data.Categories.forEach((category) => {\n          category.text = category.title\n          category.value = category.id\n        })\n        const oldState = [...budgets]\n        oldState.splice(\n          oldState.indexOf(oldState.find((item) => item.id === data.id)),\n          1,\n          data\n        )\n        setBudgets(oldState)\n        Cookies.set(\"budgets\", JSON.stringify(budgets))\n        setLoading(false)\n        history.push(`/budgets/${data.id}`)\n      })\n    setLoading(false)\n  }\n\n  function changeCategoryTitle(id, title) {\n    setError(\"\")\n    const category = editedCategories.find((cat) => cat.id === id)\n    const itemIndex = editedCategories.indexOf(category)\n    category.title = title\n    const newEditedCategoriesState = [...editedCategories]\n    newEditedCategoriesState[itemIndex] = category\n    setEditedCategories(newEditedCategoriesState)\n  }\n\n  function changeCategoryAmount(id, amount) {\n    setError(\"\")\n    const category = editedCategories.find((cat) => cat.id === id)\n    const itemIndex = editedCategories.indexOf(category)\n    category.amount = Number(amount)\n    const newEditedCategoriesState = [...editedCategories]\n    newEditedCategoriesState[itemIndex] = category\n    setEditedCategories(newEditedCategoriesState)\n  }\n\n  function addCategory() {\n    if (newCategoryTitle && newCategoryAmount) {\n      const newState = [...newCategories]\n      newState.push({\n        title: newCategoryTitle,\n        amount: newCategoryAmount,\n        budgetId: budget.id,\n      })\n      setNewCategories(newState)\n      setNewCategoryTitle(\"\")\n      setNewCategoryAmount(\"\")\n    }\n  }\n\n  function removeCategory(id) {\n    setError(\"\")\n    if (categories.length === 1) {\n      setError(\"Your budget must have at least one category.\")\n      return\n    }\n    const category = categories.find((cat) => cat.id === id)\n    const newCategoriesState = [...categories]\n    const itemIndex = categories.indexOf(category)\n    newCategoriesState.splice(itemIndex, 1)\n    setCategories(newCategoriesState)\n    setEditedCategories(newCategoriesState)\n    const newDeleteCategoryState = [...categoriesToDelete]\n    newDeleteCategoryState.push(category.id)\n    setCategoriesToDelete(newDeleteCategoryState)\n  }\n\n  return (\n    <Container>\n      <Breadcrumb\n        sections={[\n          { name: \"Manage Budgets\", path: \"/budgets/manage\" },\n          { name: budget.title, path: `/budgets/manage/${id}` },\n        ]}\n      />\n      <Grid columns={1}>\n        <Grid.Column>\n          <Segment raised style={{ padding: \"35px\", marginBottom: \"100px\" }}>\n            <Header as=\"h2\">Edit Budget</Header>\n            {error ? (\n              <Message color=\"red\" className=\"mt-1\">\n                {error}\n              </Message>\n            ) : null}\n            {budget ? (\n              <React.Fragment>\n                <Form className=\"mt-2\">\n                  <Form.Input\n                    label=\"Title\"\n                    value={title}\n                    onChange={(e) => setTitle(e.target.value)}\n                  />\n                  <Form.TextArea\n                    label=\"Description\"\n                    value={description}\n                    onChange={(e) => setDescription(e.target.value)}\n                  ></Form.TextArea>\n                  <Header as=\"h4\">Categories</Header>\n                  {categories\n                    ? categories.map((category) => (\n                        <Form.Group widths=\"equal\" key={category.id}>\n                          <Form.Input\n                            placeholder={category.title}\n                            onChange={(e) =>\n                              changeCategoryTitle(category.id, e.target.value)\n                            }\n                          />\n                          <Form.Input\n                            value={category.amount}\n                            onChange={(e) =>\n                              changeCategoryAmount(category.id, e.target.value)\n                            }\n                          />\n                          <ConfirmDeleteCategory\n                            onConfirm={() => removeCategory(category.id)}\n                            onCancel={null}\n                            buttonText={null}\n                            icon=\"trash\"\n                          />\n                        </Form.Group>\n                      ))\n                    : null}\n                  <Header as=\"h4\">New Category</Header>\n                  <Form.Group widths=\"equal\">\n                    <Form.Input\n                      placeholder=\"Title\"\n                      value={newCategoryTitle}\n                      onChange={(e) => setNewCategoryTitle(e.target.value)}\n                    />\n                    <Form.Input\n                      placeholder=\"Amount\"\n                      value={newCategoryAmount}\n                      onChange={(e) => setNewCategoryAmount(e.target.value)}\n                    />\n                    <Button icon=\"plus\" onClick={addCategory} />\n                  </Form.Group>\n                </Form>\n                <div className=\"mt-1\">\n                  {newCategories.map((item, i) => (\n                    <Button\n                      key={i}\n                      size=\"tiny\"\n                      icon\n                      labelPosition=\"right\"\n                      style={{ marginBottom: \"12px\" }}\n                      onClick={() =>\n                        setNewCategories(\n                          newCategories.filter((item, index) => i !== index)\n                        )\n                      }\n                    >\n                      {item.title} ${item.amount}\n                      <Icon name=\"minus\" />\n                    </Button>\n                  ))}\n                </div>\n                <Button onClick={handleSave} className=\"mt-1\" loading={loading}>\n                  <Icon name=\"save\" />\n                  Save\n                </Button>\n                <Popup\n                  content=\"Undo all changes\"\n                  trigger={\n                    <Button onClick={reset} className=\"mt-1\">\n                      <Icon name=\"refresh\" />\n                      Reset\n                    </Button>\n                  }\n                />\n                <Popup\n                  content=\"Delete this budget\"\n                  trigger={\n                    <ConfirmDeleteBudgetModal\n                      budgetId={budget.id}\n                      deleteBudget={deleteBudget}\n                    />\n                  }\n                />\n              </React.Fragment>\n            ) : null}\n          </Segment>\n        </Grid.Column>\n      </Grid>\n    </Container>\n  )\n}\n",["114","115"],"/home/michael/Desktop/Projects/simple-budget-app/simplebudget-web-client/src/components/NewBudget.js",["116"],"import React, { useState } from \"react\"\nimport { useHistory } from \"react-router-dom\"\nimport {\n  Button,\n  Container,\n  Divider,\n  Form,\n  Header,\n  Icon,\n  Message,\n  Segment,\n} from \"semantic-ui-react\"\nimport Cookies from \"js-cookie\"\nimport Breadcrumb from \"./Breadcrumb\"\nimport ProTip from \"./ProTip\"\n\nexport default function NewBudget({ user, budgets, setBudgets, addBudget }) {\n  const [categories, setCategories] = useState([])\n  const [title, setTitle] = useState(\"\")\n  const [description, setDescription] = useState(\"\")\n  const [categoryName, setCategoryName] = useState(\"\")\n  const [categoryValue, setCategoryValue] = useState(\"\")\n  const [loading, setLoading] = useState(false)\n  const [error, setError] = useState()\n  const history = useHistory()\n\n  /**\n   * Add a category to state from form values\n   */\n  function addCategory() {\n    if (categoryName && categoryValue) {\n      const category = {}\n      category[categoryName] = categoryValue\n      setCategories([...categories, category])\n      setCategoryName(\"\")\n      setCategoryValue(\"\")\n    }\n  }\n\n  function doAddBudget() {\n    if (title && description && categories.length > 0) {\n      setLoading(true)\n      const payload = {\n        budget: {\n          title,\n          description,\n          total: categories.reduce(\n            (acc, curr) => acc + Number(Object.values(curr)[0]),\n            0\n          ),\n          userId: user.id,\n        },\n        categories,\n      }\n      console.log(payload)\n      addBudget(payload)\n        .then((response) => response.json())\n        .then((data) => {\n          // this is necessary so that categories can be viewed in select dropdowns\n          data.Categories.forEach((category) => {\n            category.text = category.title\n            category.value = category.id\n          })\n          setBudgets([...budgets, data])\n          Cookies.set(\"budgets\", JSON.stringify(data))\n          setLoading(false)\n          history.push(`/budgets/${data.id}`)\n        })\n    }\n  }\n\n  return (\n    <Container>\n      <Breadcrumb\n        color=\"blue\"\n        sections={[\n          { name: \"Dashboard\", path: \"/\" },\n          { name: \"Budgets\", path: \"/budgets/manage\" },\n          { name: \"New\", path: \"/budgets/new\" },\n        ]}\n      />\n\n      <ProTip\n        text=\"A budget should center on a theme (i.e, personal, side hustle, etc). You\n        can specify as many item categories as you want. To delete a budget\n        item, click it's button.\"\n      />\n\n      <Segment raised className=\"mt-2\" style={{ padding: \"35px\" }}>\n        {error ? <Message color=\"red\">{error}</Message> : null}\n        <Header as=\"h2\">Create Budget</Header>\n        <Form className=\"mt-1\" fluid>\n          <Form.Field width={15}>\n            <label>Title</label>\n            <Form.Input\n              placeholder=\"E.g My Personal Budget\"\n              value={title}\n              onChange={(e) => setTitle(e.target.value)}\n            ></Form.Input>\n          </Form.Field>\n          <Form.Field width={15}>\n            <Form.TextArea\n              label=\"Description\"\n              placeholder=\"E.g A budget to track my monthly bills and expenditures\"\n              value={description}\n              onChange={(e) => setDescription(e.target.value)}\n            ></Form.TextArea>\n          </Form.Field>\n          <Divider hidden />\n          <Header as=\"h3\">Categories</Header>\n          <Form.Group className=\"mt-1\">\n            <Form.Input\n              value={categoryName}\n              width={9}\n              label=\"Category Name\"\n              placeholder=\"E.g Groceries\"\n              onChange={(e) => setCategoryName(e.target.value)}\n            ></Form.Input>\n            <Form.Input\n              value={categoryValue}\n              width={3}\n              label=\"Amount\"\n              placeholder=\"E.g 340.50\"\n              onChange={(e) => setCategoryValue(e.target.value)}\n            ></Form.Input>\n          </Form.Group>\n          <Button color=\"green\" size=\"tiny\" onClick={() => addCategory()}>\n            <Icon name=\"plus\" />\n            Add\n          </Button>\n          <div className=\"mt-1\">\n            {categories.map((item, i) => (\n              <Button\n                key={i}\n                size=\"tiny\"\n                icon\n                labelPosition=\"right\"\n                style={{ marginBottom: \"12px\" }}\n                onClick={() =>\n                  setCategories(categories.filter((item, index) => i !== index))\n                }\n              >\n                {Object.keys(item)[0]} ${Object.values(item)[0]}\n                <Icon name=\"minus\" color=\"red\" />\n              </Button>\n            ))}\n          </div>\n          <Divider hidden />\n          <Button loading={loading} onClick={() => doAddBudget()} size=\"big\">\n            Done\n          </Button>\n        </Form>\n      </Segment>\n    </Container>\n  )\n}\n","/home/michael/Desktop/Projects/simple-budget-app/simplebudget-web-client/src/index.js",[],"/home/michael/Desktop/Projects/simple-budget-app/simplebudget-web-client/src/components/AddExpense.js",["117"],"import React, { useState } from \"react\"\nimport {\n  Button,\n  Container,\n  Divider,\n  Form,\n  Header,\n  Icon,\n  List,\n  Segment,\n} from \"semantic-ui-react\"\nimport Breadcrumb from \"./Breadcrumb\"\n\nexport default function AddExpense(props) {\n  const [amount, setAmount] = useState(\"\")\n  const [budget, setBudget] = useState(\"\")\n  const [category, setCategory] = useState(\"\")\n  const [date, setDate] = useState(\"\")\n  const [loading, setLoading] = useState(false)\n  const [payload, setPayload] = useState([])\n  const [error, setError] = useState(\"\")\n  const [saveButtonText, setSaveButtonText] = useState(\"Save\")\n\n  const budgetTitles = props.budgets.map((budget) => {\n    return {\n      key: budget.id,\n      text: budget.title,\n      value: budget.title,\n    }\n  })\n\n  /**\n   * Handle click to save expenditures\n   */\n  function handleSave() {\n    setLoading(true)\n    props\n      .addExpenditure(payload)\n      .then(() => {\n        setLoading(false)\n        setAmount(\"\")\n        setDate(\"\")\n        setPayload([])\n        setSaveButtonText(\"Saved!\")\n      })\n      .catch((error) => setError(error))\n  }\n\n  /**\n   * Set budget state based on budget dropdown value\n   * @param {Object} data\n   */\n  function handleBudgetDropdownChange(data) {\n    setBudget(props.budgets.find((budget) => budget.title === data.value))\n  }\n\n  /**\n   * Add a category to state\n   * @param {Object} data - select element data\n   */\n  function handleSetCategory(data) {\n    const categoryId = data.value\n    const category = budget.Categories.find(\n      (category) => category.id === categoryId\n    )\n    setCategory(category)\n  }\n\n  /**\n   * Add a new expenditure to the http payload\n   */\n  function addToPayload() {\n    const newPayLoad = payload\n    const [year, month, day] = date.split(\"-\")\n    newPayLoad.push({\n      userId: props.user.id,\n      budgetId: budget.id,\n      categoryId: category.id,\n      title: category.title,\n      amount,\n      date,\n      year,\n      month,\n      day,\n    })\n    setPayload(newPayLoad)\n    setAmount(\"\")\n  }\n\n  /**\n   * Remove an expenditure from state\n   * @param {Number} i - expenditure index\n   */\n  function removeFromPayload(i) {\n    const newPayload = payload.filter((item, index) => index !== i)\n    setPayload(newPayload)\n  }\n\n  return (\n    <Container>\n      <Breadcrumb\n        sections={[\n          { name: \"Dashboard\", path: \"/\" },\n          { name: \"Expenditures\", path: \"/expenditures\" },\n          { name: \"New\", path: \"/expenditures/new\" },\n        ]}\n      />\n      <Segment raised className=\"mt-2\" style={{ padding: \"35px\" }}>\n        <Header as=\"h2\">Add Expenses</Header>\n        <Form className=\"mt-1\">\n          <Form.Group widths=\"equal\">\n            <Form.Input\n              fluid\n              type=\"date\"\n              label=\"Date\"\n              value={date}\n              onChange={(e, data) => setDate(data.value)}\n            />\n            <Form.Select\n              fluid\n              label=\"Budget\"\n              options={budgetTitles}\n              placeholder=\"Budget\"\n              onChange={(e, data) => handleBudgetDropdownChange(data)}\n            ></Form.Select>\n            <Form.Select\n              fluid\n              label=\"Category\"\n              options={budget.Categories}\n              placeholder=\"Category\"\n              onChange={(e, data) => handleSetCategory(data)}\n            ></Form.Select>\n            <Form.Input\n              fluid\n              label=\"Amount\"\n              placeholder=\"E.g 25.56\"\n              value={amount}\n              onChange={(e) => setAmount(e.target.value)}\n            ></Form.Input>\n          </Form.Group>\n          <Button color=\"green\" size=\"tiny\" onClick={addToPayload}>\n            <Icon name=\"plus\" />\n            Add\n          </Button>\n        </Form>\n        {payload ? (\n          <React.Fragment>\n            <List divided style={{ marginTop: \"22px\" }}>\n              {payload.map((item, i) => (\n                <List.Item key={i}>\n                  <List.Content floated=\"right\">\n                    <Button\n                      onClick={() => removeFromPayload(i)}\n                      size=\"mini\"\n                      color=\"red\"\n                      float=\"right\"\n                      icon=\"minus\"\n                    ></Button>\n                  </List.Content>\n                  <List.Content>\n                    <List.Header>{item.budget}</List.Header>\n                    <List.Description>\n                      {item.title}, ${item.amount}\n                    </List.Description>\n                    <List.Description>{item.date}</List.Description>\n                  </List.Content>\n                </List.Item>\n              ))}\n            </List>\n          </React.Fragment>\n        ) : null}\n        <Divider />\n        <Button compact size=\"big\" loading={loading} onClick={handleSave}>\n          <Icon name=\"save\" />\n          {saveButtonText}\n        </Button>\n      </Segment>\n    </Container>\n  )\n}\n",["118","119"],"/home/michael/Desktop/Projects/simple-budget-app/simplebudget-web-client/src/components/Login.js",["120","121"],"import React, { useState } from \"react\"\nimport { useHistory, useLocation } from \"react-router-dom\"\nimport Cookies from \"js-cookie\"\nimport {\n  Button,\n  Checkbox,\n  Container,\n  Form,\n  Header,\n  Message,\n} from \"semantic-ui-react\"\n\nexport default function Login({ login, getBudgets, getBills }) {\n  const [queryParams, setQueryParams] = useState(\n    new URLSearchParams(useLocation().search)\n  )\n  const [username, setUsername] = useState(\"\")\n  const [password, setPassword] = useState(\"\")\n  const [checkbox, setCheckbox] = useState(false)\n  const [error, setError] = useState(\"\")\n  const history = useHistory()\n\n  async function handleLogin() {\n    const user = await login(username, password, checkbox, setError)\n    await getBudgets(user)\n    await getBills(user)\n    history.push(\"/\")\n  }\n\n  return (\n    <Container>\n      {queryParams.get(\"newsignup\") ? (\n        <Message color=\"green\">Awesome! You can login now</Message>\n      ) : null}\n      <Header as=\"h1\" className=\"mt-3\">\n        Login\n      </Header>\n      <Form>\n        <Form.Field width={5}>\n          <input\n            placeholder=\"username\"\n            onChange={(e) => setUsername(e.target.value)}\n          />\n        </Form.Field>\n        <Form.Field width={5}>\n          <input\n            placeholder=\"password\"\n            onChange={(e) => setPassword(e.target.value)}\n            type=\"password\"\n          />\n        </Form.Field>\n        <Form.Field>\n          <Form.Field width={5}>\n            <Checkbox\n              label=\"Keep me logged in\"\n              onChange={(e) => setCheckbox(!checkbox)}\n            />\n            {error ? <Message color=\"red\">{error.message}</Message> : null}\n          </Form.Field>\n          <Button onClick={handleLogin} size=\"big\" color=\"primary\">\n            Login\n          </Button>\n        </Form.Field>\n      </Form>\n    </Container>\n  )\n}\n",["122","123"],"/home/michael/Desktop/Projects/simple-budget-app/simplebudget-web-client/src/components/ManageBudgets.js",[],"/home/michael/Desktop/Projects/simple-budget-app/simplebudget-web-client/src/components/modals/ConfirmDeleteCategory.js",["124"],"/home/michael/Desktop/Projects/simple-budget-app/simplebudget-web-client/src/reportWebVitals.js",[],["125","126"],"/home/michael/Desktop/Projects/simple-budget-app/simplebudget-web-client/src/components/Settings.js",["127","128","129"],"import React, { useState } from \"react\"\nimport { Button, Container, Header, Segment } from \"semantic-ui-react\"\nimport ToggleSwitch from \"./ToggleSwitch\"\nimport Breadcrumb from \"./Breadcrumb\"\n\nexport default () => {\n  return (\n    <Container>\n      <Breadcrumb\n        sections={[\n          { name: \"Dashboard\", path: \"/\" },\n          { name: \"Settings\", path: \"/settings\" },\n        ]}\n      />\n      <Segment raised className=\"mt-2\" style={{ padding: \"35px\" }}>\n        <Header as=\"h2\">Application Settings</Header>\n        <section className=\"mt-2\">\n          <div>\n            <label>\n              <p>Show Pro Tips</p>\n              <ToggleSwitch />\n            </label>\n          </div>\n\n          <div style={{ marginTop: \"8px\" }}>\n            <label>\n              <p>Show Reminders</p>\n              <ToggleSwitch />\n            </label>\n          </div>\n\n          <div style={{ marginTop: \"8px\" }}>\n            <label>\n              <p>Dark Mode</p>\n              <ToggleSwitch />\n            </label>\n          </div>\n        </section>\n      </Segment>\n    </Container>\n  )\n}\n","/home/michael/Desktop/Projects/simple-budget-app/simplebudget-web-client/src/components/EditExpenditure.js",["130","131"],"import React, { useState, useEffect } from \"react\"\nimport {\n  Button,\n  Container,\n  Dropdown,\n  Form,\n  Header,\n  Icon,\n  Segment,\n} from \"semantic-ui-react\"\nimport { useParams, useHistory } from \"react-router-dom\"\nimport Breadcrumb from \"./Breadcrumb\"\nimport ConfirmDeleteExpenseModal from \"./modals/ConfirmDeleteExpenseModal\"\n\nexport default function EditExpenditure({\n  user,\n  budgets,\n  getExpenditure,\n  updateExpenditure,\n  deleteExpenditure,\n}) {\n  const { id } = useParams()\n  const history = useHistory()\n  const [budget, setBudget] = useState(\"\")\n  const [category, setCategory] = useState(\"\")\n  const [amount, setAmount] = useState(\"\")\n  const [year, setYear] = useState(\"\")\n  const [month, setMonth] = useState(\"\")\n  const [day, setday] = useState(\"\")\n  const [loading, setLoading] = useState(false)\n  const [error, setError] = useState(\"\")\n  const [buttonText, setButtonText] = useState(\"Save\")\n  const [categories, setCategories] = useState(\"\")\n  const state = history.location.state\n\n  useEffect(() => {\n    getExpenditure(id)\n      .then((response) => response.json())\n      .then((expenditure) => {\n        setBudget(expenditure.budgetId)\n        setCategory(expenditure.Category.id)\n        setCategories(\n          budgets.find((bug) => bug.id === expenditure.budgetId).Categories\n        )\n        setAmount(expenditure.amount)\n        setYear(expenditure.year)\n        setMonth(expenditure.month)\n        setday(expenditure.day)\n      })\n  }, [])\n\n  /**\n   * Parse and set date state\n   * @param {Object} e - synthetic browser event\n   */\n  function handleChangeDate(e) {\n    const [year, month, day] = e.target.value.split(\"-\")\n    setYear(year)\n    setday(day)\n    setMonth(month)\n  }\n\n  /**\n   * Assemble a payload and send PUT request\n   */\n  function handlSave() {\n    setLoading(true)\n    const payload = {}\n    if (amount) {\n      payload.amount = Number(amount)\n    }\n    if (year) {\n      payload.year = year\n      payload.month = month\n      payload.day = day\n    }\n    if (Object.keys(payload).length) {\n      payload.userId = user.id\n      payload.budgetId = budget\n      payload.categoryId = category\n      updateExpenditure(id, payload)\n        .then(() => {\n          setLoading(false)\n          setButtonText(\"Saved!\")\n        })\n        .catch((error) => setError(error))\n    }\n  }\n\n  /**\n   * Send state back to ViewSpending\n   * @param {Object} e - synthetic DOM event\n   */\n  function backToViewPrevious(e) {\n    e.preventDefault()\n    history.push({\n      pathname: \"/expenditures/view\",\n      state,\n    })\n  }\n\n  function handleDelete() {\n    deleteExpenditure(id).then(() => history.push(\"/expenditures/view\"))\n  }\n\n  function handleChangeBudget(budgetId) {\n    setBudget(budgetId)\n    setCategories(budgets.find((bug) => bug.id === budgetId).Categories)\n  }\n\n  const budgetsSelectOptions = budgets.map((budget) => ({\n    key: budget.id,\n    value: budget.id,\n    text: budget.title,\n  }))\n\n  return (\n    <Container>\n      <Breadcrumb\n        sections={[\n          { name: \"Dashboard\", path: \"/\" },\n          { name: \"View Spending\", path: \"/expenditures/view\" },\n          { name: \"Edit Expenditure\", path: `/expenditure/${id}` },\n        ]}\n      />\n\n      <Segment raised className=\"mt-2\" style={{ padding: \"35px\" }}>\n        <Header as=\"h1\">Edit Expenditure</Header>\n        <Form>\n          <Form.Field width=\"8\">\n            <Dropdown\n              fluid\n              selection\n              options={budgetsSelectOptions}\n              value={budget}\n              onChange={(e, data) => handleChangeBudget(data.value)}\n            />\n          </Form.Field>\n          <Form.Field width=\"8\">\n            <Dropdown\n              fluid\n              selection\n              options={\n                categories\n                  ? categories.map((cat) => ({\n                      key: cat.id,\n                      value: cat.id,\n                      text: cat.title,\n                    }))\n                  : null\n              }\n              label=\"Category\"\n              value={category}\n              onChange={(e, data) => setCategory(data.value)}\n            />\n          </Form.Field>\n          <Form.Field width=\"8\">\n            <Form.Input\n              fluid\n              type=\"number\"\n              label=\"Amount\"\n              value={amount}\n              onChange={(e) => setAmount(e.target.value)}\n            />\n          </Form.Field>\n          <Form.Field width=\"8\">\n            <Form.Input\n              fluid\n              type=\"date\"\n              label=\"Date\"\n              onChange={handleChangeDate}\n            />\n          </Form.Field>\n          <Button loading={loading} onClick={handlSave}>\n            <Icon name=\"save\" />\n            {buttonText}\n          </Button>\n          <Button onClick={(e) => backToViewPrevious(e)}>Back</Button>\n          <ConfirmDeleteExpenseModal handleDelete={handleDelete} />\n        </Form>\n      </Segment>\n    </Container>\n  )\n}\n","/home/michael/Desktop/Projects/simple-budget-app/simplebudget-web-client/src/components/Dashboard.js",["132","133","134","135","136"],"import React from \"react\"\nimport { Container, Grid, Header, Button, Icon } from \"semantic-ui-react\"\nimport { Link, useHistory } from \"react-router-dom\"\nimport Reminder from \"./Reminder\"\n\nexport default ({ user }) => {\n  const date = new Date()\n  const year = date.getFullYear()\n  const month = date.getMonth()\n\n  return (\n    <Container>\n      <Header as=\"h2\" style={{ marginTop: \"25px\" }}>\n        {user ? `Welcome, ${user.firstName}` : null}\n      </Header>\n      <Grid padded stackable style={{ marginTop: \"50px\" }}>\n        <Grid.Column width={5}>\n          <Button\n            className=\"dashboard-btn\"\n            fluid\n            as={Link}\n            to=\"/budgets/new\"\n            raised\n            size=\"big\"\n          >\n            <Icon name=\"add\" style={{ color: \"mediumSeaGreen \" }} />\n            Create New Budget\n          </Button>\n        </Grid.Column>\n\n        <Grid.Column width={5}>\n          <Button\n            className=\"dashboard-btn\"\n            fluid\n            as={Link}\n            to=\"/budgets/manage\"\n            raised\n            size=\"big\"\n          >\n            <Icon name=\"edit\" style={{ color: \"indianRed \" }} />\n            Manage Budgets\n          </Button>\n        </Grid.Column>\n\n        <Grid.Column width={5}>\n          <Button\n            className=\"dashboard-btn\"\n            fluid\n            as={Link}\n            to=\"/expenditures/new\"\n            raised\n            size=\"big\"\n          >\n            <Icon name=\"dollar\" style={{ color: \"darkOrange \" }} />\n            Record Expenditures\n          </Button>\n        </Grid.Column>\n\n        <Grid.Column width={5}>\n          <Button\n            className=\"dashboard-btn\"\n            fluid\n            as={Link}\n            to=\"/bills\"\n            raised\n            size=\"big\"\n          >\n            <Icon name=\"chart pie\" style={{ color: \"darkOrchid \" }} />\n            Manage Bills\n          </Button>\n        </Grid.Column>\n\n        <Grid.Column width={5}>\n          <Button\n            className=\"dashboard-btn\"\n            fluid\n            as={Link}\n            to=\"/bills/new\"\n            raised\n            size=\"big\"\n          >\n            <Icon name=\"add\" style={{ color: \"mediumSeaGreen \" }} />\n            Record Bills\n          </Button>\n        </Grid.Column>\n\n        <Grid.Column width={5}>\n          <Button\n            className=\"dashboard-btn\"\n            fluid\n            as={Link}\n            to=\"/statistics\"\n            raised\n            size=\"big\"\n          >\n            <Icon name=\"chart bar\" style={{ color: \"mediumAquaMarine \" }} />\n            View Statistics\n          </Button>\n        </Grid.Column>\n\n        <Grid.Column width={5}>\n          <Button\n            className=\"dashboard-btn\"\n            fluid\n            as={Link}\n            to=\"/expenditures/view\"\n            raised\n            size=\"big\"\n          >\n            <Icon name=\"money\" style={{ color: \"dodgerBlue \" }} />\n            View Spending\n          </Button>\n        </Grid.Column>\n\n        <Grid.Column width={5}>\n          <Button\n            className=\"dashboard-btn\"\n            fluid\n            as={Link}\n            to=\"/settings\"\n            raised\n            size=\"big\"\n          >\n            <Icon name=\"setting\" style={{ color: \"salmon \" }} />\n            App Settings\n          </Button>\n        </Grid.Column>\n      </Grid>\n    </Container>\n  )\n}\n","/home/michael/Desktop/Projects/simple-budget-app/simplebudget-web-client/src/components/Account.js",[],"/home/michael/Desktop/Projects/simple-budget-app/simplebudget-web-client/src/components/modals/ConfirmDeleteBudgetModal.js",["137","138","139"],"/home/michael/Desktop/Projects/simple-budget-app/simplebudget-web-client/src/components/Navbar.js",["140"],"import React from \"react\"\nimport { Menu, Container } from \"semantic-ui-react\"\nimport { NavLink } from \"react-router-dom\"\nimport ConfirmLogoutModal from \"./modals/ConfirmLogoutModal\"\n\nexport default ({ user, login, logout, darkmode }) => {\n  return (\n    <Menu inverted={!darkmode} style={{ borderRadius: \"0\" }}>\n      <Container>\n        <Menu.Item\n          as={NavLink}\n          to=\"/\"\n          exact\n          name={user ? \"dashboard\" : \"SimpleBudget\"}\n        />\n        {user ? (\n          <Menu.Item as={NavLink} to=\"/budgets/manage\" name=\"My Budgets\" />\n        ) : null}\n        <Menu.Menu position=\"right\">\n          {user ? (\n            <Menu.Item\n              as={NavLink}\n              to=\"/account\"\n              icon=\"user\"\n              name=\"Account\"\n            ></Menu.Item>\n          ) : null}\n          {!user ? <Menu.Item as={NavLink} to=\"/login\" name=\"login\" /> : null}\n          {user ? (\n            <ConfirmLogoutModal user={user} logout={logout} />\n          ) : (\n            <Menu.Item as={NavLink} to=\"/signup\" name=\"sign up\" />\n          )}\n        </Menu.Menu>\n      </Container>\n    </Menu>\n  )\n}\n","/home/michael/Desktop/Projects/simple-budget-app/simplebudget-web-client/src/components/FinancialProfile.js",["141"],"/home/michael/Desktop/Projects/simple-budget-app/simplebudget-web-client/src/components/ViewSpending.js",["142"],"import React, { useState, useEffect } from \"react\"\nimport { useHistory } from \"react-router-dom\"\nimport {\n  Button,\n  Container,\n  Form,\n  Header,\n  Message,\n  Pagination,\n  Segment,\n  Table,\n  Popup,\n} from \"semantic-ui-react\"\nimport Breadcrumb from \"./Breadcrumb\"\n\nexport default function ViewSpending({ getExpenditures, user, budgets }) {\n  const history = useHistory()\n  const state = history.location.state\n  const months = {\n    1: \"January\",\n    2: \"February\",\n    3: \"March\",\n    4: \"April\",\n    5: \"May\",\n    6: \"June\",\n    7: \"July\",\n    8: \"August\",\n    9: \"September\",\n    10: \"October\",\n    11: \"November\",\n    12: \"December\",\n  }\n  const [currentPage, setCurrentPage] = useState(1)\n  const [numberOfPages, setNumberOfPages] = useState(1)\n  const [budget, setBudget] = useState(\"\")\n  const [expenditures, setExpenditures] = useState([])\n  const [year, setYear] = useState(new Date().getFullYear())\n  const [month, setMonth] = useState(\"\")\n  const [day, setDay] = useState(\"\")\n  const [dateText, setDateText] = useState(\n    `${month ? months[month] : \"\"} ${day ? day : \"\"} ${year}`\n  )\n  const [error, setError] = useState(\"\")\n  const [loading, setLoading] = useState(false)\n  const accountCreated = Number(user.createdAt.split(\"-\")[0])\n  const currentYear = new Date().getFullYear()\n  const yearSelectOptions = Array.from(\n    new Array(currentYear - accountCreated + 1)\n  )\n    .map((_, i) => ({\n      key: i,\n      value: accountCreated + i,\n      text: accountCreated + i,\n    }))\n    .reverse()\n  yearSelectOptions.unshift({\n    key: \"placeholder\",\n    text: \"Select One\",\n    value: \"\",\n  })\n  const daySelectOptions = Array.from(new Array(31)).map((_, i) => ({\n    key: i + 1,\n    value: i + 1,\n    text: i + 1,\n  }))\n  daySelectOptions.unshift({\n    key: \"placeholder\",\n    text: \"Any\",\n    value: \"any\",\n  })\n  const monthSelectOptions = Array.from(new Array(12)).map((_, i) => ({\n    key: i + 1,\n    value: i + 1,\n    text: months[i + 1],\n  }))\n  monthSelectOptions.unshift({\n    key: \"placeholder\",\n    text: \"Any\",\n    value: \"any\",\n  })\n  const budgetsSelectOptions = budgets.map((budget) => ({\n    key: budget.id,\n    value: budget.id,\n    text: budget.title,\n  }))\n  budgetsSelectOptions.unshift({\n    key: \"placeholder\",\n    text: \"Any\",\n    value: \"any\",\n  })\n\n  // if history.location.state is not undefined set state to incoming state\n  useEffect(() => {\n    if (state) {\n      getExpenditures(\n        state.year,\n        state.month ? state.month : null,\n        state.day ? state.day : null,\n        state.budget.id ? state.budget.id : null\n      )\n        .then((result) => {\n          if (!result.length) {\n            return setError(\n              \"There are no results for the selected filter options.\"\n            )\n          }\n          const pages = chunkArray(result, 10)\n          setExpenditures(pages)\n          setNumberOfPages(pages.length)\n        })\n        .finally(() => setLoading(false))\n        .catch((error) => setError(error.message))\n    }\n  }, [])\n\n  function chunkArray(array, size) {\n    if (array.length <= size) {\n      return [array]\n    }\n    let result = []\n    for (let value of array) {\n      let lastArray = result[result.length - 1]\n      if (!lastArray || lastArray.length === size) {\n        result.push([value])\n      } else {\n        lastArray.push(value)\n      }\n    }\n    return result\n  }\n\n  function handleGetExpenditures() {\n    setExpenditures([])\n    setError(\"\")\n    if (!year) {\n      return setError(\"Please select a year.\")\n    }\n    if (!month && day) {\n      return setError(\"Please select a month.\")\n    }\n    setDateText(`${month ? months[month] : \"\"} ${day ? day : \"\"} ${year}`)\n    setCurrentPage(1)\n    setLoading(true)\n    getExpenditures(\n      year,\n      month ? month : null,\n      day ? day : null,\n      budget.id ? budget.id : null\n    )\n      .then((result) => {\n        if (!result.length) {\n          return setError(\n            \"There are no results for the selected filter options.\"\n          )\n        }\n        const pages = chunkArray(result, 10)\n        setExpenditures(pages)\n        setNumberOfPages(pages.length)\n      })\n      .finally(() => setLoading(false))\n      .catch((error) => setError(error.message))\n  }\n\n  /**\n   * Send current view state when redirecting to edit expenditure\n   * Allows state to be passed back to persist current selections\n   * @param {Object} e - synthetic DOM event\n   * @param {Number} expenditureId - PK for expenditure\n   */\n  function exportStateToEditExpenditure(e, expenditureId) {\n    e.preventDefault()\n    history.push({\n      pathname: `/expenditures/${expenditureId}`,\n      state: {\n        currentPage,\n        budget,\n        year,\n        month,\n        day,\n      },\n    })\n  }\n\n  return (\n    <Container>\n      <Breadcrumb\n        color=\"blue\"\n        sections={[\n          { name: \"Dashboard\", path: \"/\" },\n          { name: \"View Spending\", path: \"/expenditures/new\" },\n        ]}\n      />\n\n      <Segment raised className=\"mt-2\" style={{ padding: \"35px\" }}>\n        <Header as=\"h1\">Spending for {dateText}</Header>\n        <Form className=\"mt-2\">\n          <Form.Group widths=\"equal\">\n            <Form.Select\n              fluid\n              options={budgetsSelectOptions}\n              placeholder=\"Budgets\"\n              onChange={(e, data) =>\n                setBudget(\n                  data.value === \"any\"\n                    ? \"\"\n                    : budgets.find((budget) => budget.id === data.value)\n                )\n              }\n            />\n            <Form.Select\n              fluid\n              placeholder=\"Year\"\n              value={year}\n              options={yearSelectOptions}\n              onChange={(e, data) => setYear(data.value)}\n            />\n            <Form.Select\n              fluid\n              placeholder=\"Month\"\n              options={monthSelectOptions}\n              onChange={(e, data) =>\n                setMonth(data.value === \"any\" ? \"\" : data.value)\n              }\n            />\n            <Form.Select\n              fluid\n              placeholder=\"Day\"\n              options={daySelectOptions}\n              onChange={(e, data) =>\n                setDay(data.value === \"any\" ? \"\" : data.value)\n              }\n            />\n            <Form.Field fluid>\n              <Button\n                onClick={handleGetExpenditures}\n                loading={loading}\n                style={{ padding: \"12.2px 15px\" }}\n              >\n                Go\n              </Button>\n            </Form.Field>\n          </Form.Group>\n        </Form>\n        {expenditures.length ? (\n          <Table celled selectable stackable striped>\n            <Table.Header>\n              <Table.Row>\n                <Table.HeaderCell>Budget</Table.HeaderCell>\n                <Table.HeaderCell>Category</Table.HeaderCell>\n                <Table.HeaderCell>Amount</Table.HeaderCell>\n                <Table.HeaderCell>Month</Table.HeaderCell>\n                <Table.HeaderCell>Day</Table.HeaderCell>\n                <Table.HeaderCell>Year</Table.HeaderCell>\n              </Table.Row>\n            </Table.Header>\n            <Table.Body>\n              {expenditures[currentPage - 1].map((expenditure) => (\n                <Table.Row key={expenditure.id}>\n                  <Table.Cell>{expenditure.Budget.title}</Table.Cell>\n                  <Table.Cell>{expenditure.Category.title}</Table.Cell>\n                  <Popup\n                    content=\"Click to edit expenditure\"\n                    trigger={\n                      <Table.Cell\n                        onClick={(e) =>\n                          exportStateToEditExpenditure(e, expenditure.id)\n                        }\n                        style={{ cursor: \"pointer\" }}\n                      >\n                        <div>${expenditure.amount.toFixed(2)}</div>\n                      </Table.Cell>\n                    }\n                  />\n                  <Table.Cell>{months[expenditure.month]}</Table.Cell>\n                  <Table.Cell>{expenditure.day}</Table.Cell>\n                  <Table.Cell>{expenditure.year}</Table.Cell>\n                </Table.Row>\n              ))}\n            </Table.Body>\n            {numberOfPages > 1 ? (\n              <Table.Footer>\n                <Table.Row>\n                  <Table.HeaderCell colSpan=\"6\">\n                    <Pagination\n                      onPageChange={(e, data) =>\n                        setCurrentPage(data.activePage)\n                      }\n                      boundaryRange={0}\n                      defaultActivePage={1}\n                      ellipsisItem={null}\n                      firstItem={null}\n                      lastItem={null}\n                      siblingRange={1}\n                      totalPages={numberOfPages}\n                    />\n                  </Table.HeaderCell>\n                </Table.Row>\n              </Table.Footer>\n            ) : null}\n          </Table>\n        ) : null}\n        {error ? (\n          <Message compact className=\"mt-1\" color=\"yellow\">\n            {error}\n          </Message>\n        ) : null}\n      </Segment>\n    </Container>\n  )\n}\n","/home/michael/Desktop/Projects/simple-budget-app/simplebudget-web-client/src/components/modals/ConfirmDeleteExpenseModal.js",["143"],"/home/michael/Desktop/Projects/simple-budget-app/simplebudget-web-client/src/components/modals/ConfirmDeleteAccountModal.js",["144","145","146"],"/home/michael/Desktop/Projects/simple-budget-app/simplebudget-web-client/src/components/AccountDetails.js",[],"/home/michael/Desktop/Projects/simple-budget-app/simplebudget-web-client/src/components/AccountMenu.js",[],"/home/michael/Desktop/Projects/simple-budget-app/simplebudget-web-client/src/components/AddBill.js",["147"],"/home/michael/Desktop/Projects/simple-budget-app/simplebudget-web-client/src/components/EditAccount.js",[],{"ruleId":"148","severity":1,"message":"149","line":43,"column":6,"nodeType":"150","endLine":43,"endColumn":8,"suggestions":"151"},{"ruleId":"152","severity":1,"message":"153","line":32,"column":10,"nodeType":"154","messageId":"155","endLine":32,"endColumn":15},{"ruleId":"148","severity":1,"message":"156","line":56,"column":6,"nodeType":"150","endLine":56,"endColumn":8,"suggestions":"157"},{"ruleId":"158","replacedBy":"159"},{"ruleId":"160","replacedBy":"161"},{"ruleId":"152","severity":1,"message":"162","line":24,"column":17,"nodeType":"154","messageId":"155","endLine":24,"endColumn":25},{"ruleId":"152","severity":1,"message":"163","line":21,"column":10,"nodeType":"154","messageId":"155","endLine":21,"endColumn":15},{"ruleId":"158","replacedBy":"164"},{"ruleId":"160","replacedBy":"165"},{"ruleId":"152","severity":1,"message":"166","line":3,"column":8,"nodeType":"154","messageId":"155","endLine":3,"endColumn":15},{"ruleId":"152","severity":1,"message":"167","line":14,"column":23,"nodeType":"154","messageId":"155","endLine":14,"endColumn":37},{"ruleId":"158","replacedBy":"168"},{"ruleId":"160","replacedBy":"169"},{"ruleId":"152","severity":1,"message":"170","line":2,"column":27,"nodeType":"154","messageId":"155","endLine":2,"endColumn":31},{"ruleId":"158","replacedBy":"171"},{"ruleId":"160","replacedBy":"172"},{"ruleId":"152","severity":1,"message":"173","line":1,"column":17,"nodeType":"154","messageId":"155","endLine":1,"endColumn":25},{"ruleId":"152","severity":1,"message":"174","line":2,"column":10,"nodeType":"154","messageId":"155","endLine":2,"endColumn":16},{"ruleId":"175","severity":1,"message":"176","line":6,"column":1,"nodeType":"177","endLine":42,"endColumn":2},{"ruleId":"152","severity":1,"message":"163","line":31,"column":10,"nodeType":"154","messageId":"155","endLine":31,"endColumn":15},{"ruleId":"148","severity":1,"message":"178","line":50,"column":6,"nodeType":"150","endLine":50,"endColumn":8,"suggestions":"179"},{"ruleId":"152","severity":1,"message":"180","line":3,"column":16,"nodeType":"154","messageId":"155","endLine":3,"endColumn":26},{"ruleId":"152","severity":1,"message":"181","line":4,"column":8,"nodeType":"154","messageId":"155","endLine":4,"endColumn":16},{"ruleId":"175","severity":1,"message":"176","line":6,"column":1,"nodeType":"177","endLine":131,"endColumn":2},{"ruleId":"152","severity":1,"message":"182","line":8,"column":9,"nodeType":"154","messageId":"155","endLine":8,"endColumn":13},{"ruleId":"152","severity":1,"message":"183","line":9,"column":9,"nodeType":"154","messageId":"155","endLine":9,"endColumn":14},{"ruleId":"152","severity":1,"message":"173","line":1,"column":17,"nodeType":"154","messageId":"155","endLine":1,"endColumn":25},{"ruleId":"152","severity":1,"message":"184","line":2,"column":18,"nodeType":"154","messageId":"155","endLine":2,"endColumn":24},{"ruleId":"175","severity":1,"message":"176","line":4,"column":1,"nodeType":"177","endLine":45,"endColumn":2},{"ruleId":"175","severity":1,"message":"176","line":6,"column":1,"nodeType":"177","endLine":38,"endColumn":2},{"ruleId":"152","severity":1,"message":"185","line":2,"column":45,"nodeType":"154","messageId":"155","endLine":2,"endColumn":49},{"ruleId":"148","severity":1,"message":"186","line":114,"column":6,"nodeType":"150","endLine":114,"endColumn":8,"suggestions":"187"},{"ruleId":"152","severity":1,"message":"173","line":1,"column":17,"nodeType":"154","messageId":"155","endLine":1,"endColumn":25},{"ruleId":"152","severity":1,"message":"173","line":1,"column":17,"nodeType":"154","messageId":"155","endLine":1,"endColumn":25},{"ruleId":"152","severity":1,"message":"184","line":3,"column":18,"nodeType":"154","messageId":"155","endLine":3,"endColumn":24},{"ruleId":"175","severity":1,"message":"176","line":5,"column":1,"nodeType":"177","endLine":53,"endColumn":2},{"ruleId":"152","severity":1,"message":"163","line":19,"column":10,"nodeType":"154","messageId":"155","endLine":19,"endColumn":15},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'getBills', 'getBudgets', and 'user'. Either include them or remove the dependency array.","ArrayExpression",["188"],"no-unused-vars","'total' is assigned a value but never used.","Identifier","unusedVar","React Hook useEffect has missing dependencies: 'getBudget' and 'id'. Either include them or remove the dependency array. If 'getBudget' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["189"],"no-native-reassign",["190"],"no-negated-in-lhs",["191"],"'setError' is assigned a value but never used.","'error' is assigned a value but never used.",["190"],["191"],"'Cookies' is defined but never used.","'setQueryParams' is assigned a value but never used.",["190"],["191"],"'Icon' is defined but never used.",["190"],["191"],"'useState' is defined but never used.","'Button' is defined but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","React Hook useEffect has missing dependencies: 'budgets', 'getExpenditure', and 'id'. Either include them or remove the dependency array. If 'getExpenditure' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["192"],"'useHistory' is defined but never used.","'Reminder' is defined but never used.","'year' is assigned a value but never used.","'month' is assigned a value but never used.","'Header' is defined but never used.","'List' is defined but never used.","React Hook useEffect has missing dependencies: 'getExpenditures' and 'state'. Either include them or remove the dependency array. If 'getExpenditures' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["193"],{"desc":"194","fix":"195"},{"desc":"196","fix":"197"},"no-global-assign","no-unsafe-negation",{"desc":"198","fix":"199"},{"desc":"200","fix":"201"},"Update the dependencies array to be: [getBills, getBudgets, user]",{"range":"202","text":"203"},"Update the dependencies array to be: [getBudget, id]",{"range":"204","text":"205"},"Update the dependencies array to be: [budgets, getExpenditure, id]",{"range":"206","text":"207"},"Update the dependencies array to be: [getExpenditures, state]",{"range":"208","text":"209"},[1589,1591],"[getBills, getBudgets, user]",[1667,1669],"[getBudget, id]",[1466,1468],"[budgets, getExpenditure, id]",[3005,3007],"[getExpenditures, state]"]