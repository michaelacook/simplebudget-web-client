[{"/home/michael/Desktop/Projects/simple-budget-app/simplebudget-web-client/src/components/NewBudget.js":"1","/home/michael/Desktop/Projects/simple-budget-app/simplebudget-web-client/src/components/ViewSpending.js":"2","/home/michael/Desktop/Projects/simple-budget-app/simplebudget-web-client/src/App.js":"3","/home/michael/Desktop/Projects/simple-budget-app/simplebudget-web-client/src/components/AddExpense.js":"4","/home/michael/Desktop/Projects/simple-budget-app/simplebudget-web-client/src/components/Dashboard.js":"5","/home/michael/Desktop/Projects/simple-budget-app/simplebudget-web-client/src/index.js":"6","/home/michael/Desktop/Projects/simple-budget-app/simplebudget-web-client/src/components/Settings.js":"7","/home/michael/Desktop/Projects/simple-budget-app/simplebudget-web-client/src/components/ViewBudget.js":"8","/home/michael/Desktop/Projects/simple-budget-app/simplebudget-web-client/src/components/Login.js":"9","/home/michael/Desktop/Projects/simple-budget-app/simplebudget-web-client/src/reportWebVitals.js":"10","/home/michael/Desktop/Projects/simple-budget-app/simplebudget-web-client/src/components/ManageBudgets.js":"11","/home/michael/Desktop/Projects/simple-budget-app/simplebudget-web-client/src/components/Signup.js":"12","/home/michael/Desktop/Projects/simple-budget-app/simplebudget-web-client/src/components/EditBudget.js":"13","/home/michael/Desktop/Projects/simple-budget-app/simplebudget-web-client/src/components/Navbar.js":"14","/home/michael/Desktop/Projects/simple-budget-app/simplebudget-web-client/src/components/ProTip.js":"15","/home/michael/Desktop/Projects/simple-budget-app/simplebudget-web-client/src/components/ViewStatistics.js":"16","/home/michael/Desktop/Projects/simple-budget-app/simplebudget-web-client/src/components/Account.js":"17","/home/michael/Desktop/Projects/simple-budget-app/simplebudget-web-client/src/components/ManageBills.js":"18","/home/michael/Desktop/Projects/simple-budget-app/simplebudget-web-client/src/components/AddBill.js":"19","/home/michael/Desktop/Projects/simple-budget-app/simplebudget-web-client/src/components/Reminder.js":"20"},{"size":4856,"mtime":1609257225141,"results":"21","hashOfConfig":"22"},{"size":7688,"mtime":1609264184105,"results":"23","hashOfConfig":"22"},{"size":8176,"mtime":1609434019579,"results":"24","hashOfConfig":"22"},{"size":4948,"mtime":1609297003940,"results":"25","hashOfConfig":"22"},{"size":3375,"mtime":1609365903685,"results":"26","hashOfConfig":"22"},{"size":536,"mtime":1607203421724,"results":"27","hashOfConfig":"22"},{"size":1088,"mtime":1607203421724,"results":"28","hashOfConfig":"22"},{"size":1788,"mtime":1608512505554,"results":"29","hashOfConfig":"22"},{"size":1828,"mtime":1608752252343,"results":"30","hashOfConfig":"22"},{"size":356,"mtime":1607203421724,"results":"31","hashOfConfig":"22"},{"size":2019,"mtime":1608829129632,"results":"32","hashOfConfig":"22"},{"size":6776,"mtime":1609004928975,"results":"33","hashOfConfig":"22"},{"size":2022,"mtime":1607649750573,"results":"34","hashOfConfig":"22"},{"size":1133,"mtime":1608512039091,"results":"35","hashOfConfig":"22"},{"size":468,"mtime":1609254977773,"results":"36","hashOfConfig":"22"},{"size":497,"mtime":1609289781079,"results":"37","hashOfConfig":"22"},{"size":652,"mtime":1609004302539,"results":"38","hashOfConfig":"22"},{"size":868,"mtime":1609361168233,"results":"39","hashOfConfig":"22"},{"size":612,"mtime":1609364142968,"results":"40","hashOfConfig":"22"},{"size":478,"mtime":1609365834360,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"1b9p1l1",{"filePath":"45","messages":"46","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"53"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"59"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"53"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"59"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"59"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"70"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"44"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"92","messages":"93","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/michael/Desktop/Projects/simple-budget-app/simplebudget-web-client/src/components/NewBudget.js",[],["96","97"],"/home/michael/Desktop/Projects/simple-budget-app/simplebudget-web-client/src/components/ViewSpending.js",["98","99"],"import React, { useState, useEffect } from \"react\"\nimport { Link } from \"react-router-dom\"\nimport {\n  Button,\n  Container,\n  Form,\n  Header,\n  Message,\n  Pagination,\n  Segment,\n  Table,\n} from \"semantic-ui-react\"\nimport Breadcrumb from \"./Breadcrumb\"\nimport ProTip from \"./ProTip\"\n\nexport default function ViewSpending({ getExpenditures, user, budgets }) {\n  const months = {\n    1: \"January\",\n    2: \"February\",\n    3: \"March\",\n    4: \"April\",\n    5: \"May\",\n    6: \"June\",\n    7: \"July\",\n    8: \"August\",\n    9: \"September\",\n    10: \"October\",\n    11: \"November\",\n    12: \"December\",\n  }\n  const [currentPage, setCurrentPage] = useState(1)\n  const [numberOfPages, setNumberOfPages] = useState(1)\n  const [budget, setBudget] = useState(budgets[0])\n  const [expenditures, setExpenditures] = useState([])\n  const [year, setYear] = useState(new Date().getFullYear())\n  const [month, setMonth] = useState(new Date().getMonth() + 1)\n  const [day, setDay] = useState(\"\")\n  const [dateText, setDateText] = useState(\n    `${month ? months[month] : \"\"} ${day ? day : \"\"} ${year}`\n  )\n  const [error, setError] = useState(\"\")\n  const [loading, setLoading] = useState(false)\n  const accountCreated = Number(user.createdAt.split(\"-\")[0])\n  const currentYear = new Date().getFullYear()\n  const yearSelectOptions = Array.from(\n    new Array(currentYear - accountCreated + 1)\n  ).map((_, i) => ({\n    key: i,\n    value: accountCreated + i,\n    text: accountCreated + i,\n  }))\n  yearSelectOptions.unshift({\n    key: \"placeholder\",\n    text: \"Select One\",\n    value: \"\",\n  })\n  const daySelectOptions = Array.from(new Array(31)).map((_, i) => ({\n    key: i + 1,\n    value: i + 1,\n    text: i + 1,\n  }))\n  daySelectOptions.unshift({\n    key: \"placeholder\",\n    text: \"Any\",\n    value: \"any\",\n  })\n  const monthSelectOptions = Array.from(new Array(12)).map((_, i) => ({\n    key: i + 1,\n    value: i + 1,\n    text: months[i + 1],\n  }))\n  monthSelectOptions.unshift({\n    key: \"placeholder\",\n    text: \"Any\",\n    value: \"any\",\n  })\n  const budgetsSelectOptions = budgets.map((budget) => ({\n    key: budget.id,\n    value: budget.id,\n    text: budget.title,\n  }))\n  budgetsSelectOptions.unshift({\n    key: \"placeholder\",\n    text: \"Any\",\n    value: \"any\",\n  })\n\n  function chunkArray(array, size) {\n    if (array.length <= size) {\n      return [array]\n    }\n    let result = []\n    for (let value of array) {\n      let lastArray = result[result.length - 1]\n      if (!lastArray || lastArray.length == size) {\n        result.push([value])\n      } else {\n        lastArray.push(value)\n      }\n    }\n    return result\n  }\n\n  function handleGetExpenditures() {\n    setExpenditures([])\n    setError(\"\")\n    if (!year) {\n      return setError(\"Please select a year.\")\n    }\n    if (!month && day) {\n      return setError(\"Please select a month.\")\n    }\n    setDateText(`${month ? months[month] : \"\"} ${day ? day : \"\"} ${year}`)\n    setCurrentPage(1)\n    setLoading(true)\n    getExpenditures(\n      year,\n      month ? month : null,\n      day ? day : null,\n      budget.id ? budget.id : null\n    )\n      .then((result) => {\n        if (!result.length) {\n          return setError(\n            \"There are no results for the selected filter options.\"\n          )\n        }\n        const pages = chunkArray(result, 10)\n        setExpenditures(pages)\n        setNumberOfPages(pages.length)\n      })\n      .finally(() => setLoading(false))\n      .catch((error) => setError(error.message))\n  }\n\n  return (\n    <Container>\n      <Breadcrumb\n        color=\"blue\"\n        sections={[\n          { name: \"Dashboard\", path: \"/\" },\n          { name: \"View Spending\", path: \"/expenditures/new\" },\n        ]}\n      />\n\n      <ProTip text=\"To view an individual expenditure and edit or delete, click on the expenditure amount.\" />\n\n      <Segment raised className=\"mt-2\" style={{ padding: \"35px\" }}>\n        <Header as=\"h1\">Spending for {dateText}</Header>\n        <Form className=\"mt-2\">\n          <Form.Group widths=\"equal\">\n            <Form.Select\n              fluid\n              options={budgetsSelectOptions}\n              placeholder=\"Budgets\"\n              onChange={(e, data) =>\n                setBudget(\n                  data.value === \"any\"\n                    ? \"\"\n                    : budgets.find((budget) => budget.id === data.value)\n                )\n              }\n            />\n            <Form.Select\n              fluid\n              placeholder=\"Year\"\n              options={yearSelectOptions}\n              onChange={(e, data) => setYear(data.value)}\n            />\n            <Form.Select\n              fluid\n              placeholder=\"Month\"\n              options={monthSelectOptions}\n              onChange={(e, data) =>\n                setMonth(data.value === \"any\" ? \"\" : data.value)\n              }\n            />\n            <Form.Select\n              fluid\n              placeholder=\"Day\"\n              options={daySelectOptions}\n              onChange={(e, data) =>\n                setDay(data.value === \"any\" ? \"\" : data.value)\n              }\n            />\n            <Form.Field fluid>\n              <Button\n                onClick={handleGetExpenditures}\n                loading={loading}\n                style={{ padding: \"12.2px 15px\" }}\n              >\n                Go\n              </Button>\n            </Form.Field>\n          </Form.Group>\n        </Form>\n        {expenditures.length ? (\n          <Table celled selectable stackable striped>\n            <Table.Header>\n              <Table.Row>\n                <Table.HeaderCell>Budget</Table.HeaderCell>\n                <Table.HeaderCell>Category</Table.HeaderCell>\n                <Table.HeaderCell>Amount</Table.HeaderCell>\n                <Table.HeaderCell>Month</Table.HeaderCell>\n                <Table.HeaderCell>Day</Table.HeaderCell>\n                <Table.HeaderCell>Year</Table.HeaderCell>\n              </Table.Row>\n            </Table.Header>\n            <Table.Body>\n              {expenditures[currentPage - 1].map((expenditure) => (\n                <Table.Row>\n                  <Table.Cell>{expenditure.Budget.title}</Table.Cell>\n                  <Table.Cell>{expenditure.Category.title}</Table.Cell>\n                  <Table.Cell selectable>\n                    <Link\n                      to={`/expenditures/${expenditure.id}`}\n                      target=\"_blank\"\n                    >\n                      {expenditure.amount}\n                    </Link>\n                  </Table.Cell>\n                  <Table.Cell>{months[expenditure.month]}</Table.Cell>\n                  <Table.Cell>{expenditure.day}</Table.Cell>\n                  <Table.Cell>{expenditure.year}</Table.Cell>\n                </Table.Row>\n              ))}\n            </Table.Body>\n            {numberOfPages > 1 ? (\n              <Table.Footer>\n                <Table.Row>\n                  <Table.HeaderCell colSpan=\"6\">\n                    <Pagination\n                      onPageChange={(e, data) =>\n                        setCurrentPage(data.activePage)\n                      }\n                      boundaryRange={0}\n                      defaultActivePage={1}\n                      ellipsisItem={null}\n                      firstItem={null}\n                      lastItem={null}\n                      siblingRange={1}\n                      totalPages={numberOfPages}\n                    />\n                  </Table.HeaderCell>\n                </Table.Row>\n              </Table.Footer>\n            ) : null}\n          </Table>\n        ) : null}\n        {error ? (\n          <Message compact className=\"mt-1\" color=\"yellow\">\n            {error}\n          </Message>\n        ) : null}\n      </Segment>\n    </Container>\n  )\n}\n","/home/michael/Desktop/Projects/simple-budget-app/simplebudget-web-client/src/App.js",["100","101","102","103"],"/home/michael/Desktop/Projects/simple-budget-app/simplebudget-web-client/src/components/AddExpense.js",["104"],"import React, { useState } from \"react\"\nimport {\n  Button,\n  Container,\n  Divider,\n  Form,\n  Header,\n  Icon,\n  List,\n  Segment,\n} from \"semantic-ui-react\"\nimport Breadcrumb from \"./Breadcrumb\"\n\nexport default function AddExpense(props) {\n  const [amount, setAmount] = useState(\"\")\n  const [budget, setBudget] = useState(\"\")\n  const [category, setCategory] = useState(\"\")\n  const [date, setDate] = useState(\"\")\n  const [loading, setLoading] = useState(false)\n  const [payload, setPayload] = useState([])\n  const [error, setError] = useState(\"\")\n  const [saveButtonText, setSaveButtonText] = useState(\"Save\")\n\n  const budgetTitles = props.budgets.map((budget) => {\n    return {\n      key: budget.id,\n      text: budget.title,\n      value: budget.title,\n    }\n  })\n\n  /**\n   * Handle click to save expenditures\n   */\n  function handleSave() {\n    setLoading(true)\n    props\n      .addExpenditure(payload)\n      .then(() => {\n        setLoading(false)\n        setAmount(\"\")\n        setDate(\"\")\n        setPayload([])\n        setSaveButtonText(\"Saved!\")\n      })\n      .catch((error) => setError(error))\n  }\n\n  /**\n   * Set budget state based on budget dropdown value\n   * @param {Object} data\n   */\n  function handleBudgetDropdownChange(data) {\n    setBudget(props.budgets.find((budget) => budget.title === data.value))\n  }\n\n  /**\n   * Add a category to state\n   * @param {Object} data - select element data\n   */\n  function handleSetCategory(data) {\n    const categoryId = data.value\n    const category = budget.Categories.find(\n      (category) => category.id === categoryId\n    )\n    setCategory(category)\n  }\n\n  /**\n   * Add a new expenditure to the http payload\n   */\n  function addToPayload() {\n    const newPayLoad = payload\n    const [year, month, day] = date.split(\"-\")\n    newPayLoad.push({\n      userId: props.user.id,\n      budgetId: budget.id,\n      categoryId: category.id,\n      title: category.title,\n      amount,\n      date,\n      year,\n      month,\n      day,\n    })\n    setPayload(newPayLoad)\n    setAmount(\"\")\n  }\n\n  /**\n   * Remove an expenditure from state\n   * @param {Number} i - expenditure index\n   */\n  function removeFromPayload(i) {\n    const newPayload = payload.filter((item, index) => index !== i)\n    setPayload(newPayload)\n  }\n\n  return (\n    <Container>\n      <Breadcrumb\n        sections={[\n          { name: \"Dashboard\", path: \"/\" },\n          { name: \"Expenditures\", path: \"/expenditures\" },\n          { name: \"New\", path: \"/expenditures/new\" },\n        ]}\n      />\n      <Segment raised className=\"mt-2\" style={{ padding: \"35px\" }}>\n        <Header as=\"h2\">Add Expenses</Header>\n        <Form className=\"mt-1\">\n          <Form.Group widths=\"equal\">\n            <Form.Input\n              fluid\n              type=\"date\"\n              label=\"Date\"\n              value={date}\n              onChange={(e, data) => setDate(data.value)}\n            />\n            <Form.Select\n              fluid\n              label=\"Budget\"\n              options={budgetTitles}\n              placeholder=\"Budget\"\n              onChange={(e, data) => handleBudgetDropdownChange(data)}\n            ></Form.Select>\n            <Form.Select\n              fluid\n              label=\"Category\"\n              options={budget.Categories}\n              placeholder=\"Category\"\n              onChange={(e, data) => handleSetCategory(data)}\n            ></Form.Select>\n            <Form.Input\n              fluid\n              label=\"Amount\"\n              placeholder=\"E.g 25.56\"\n              value={amount}\n              onChange={(e) => setAmount(e.target.value)}\n            ></Form.Input>\n          </Form.Group>\n          <Button color=\"green\" size=\"tiny\" onClick={addToPayload}>\n            <Icon name=\"plus\" />\n            Add\n          </Button>\n        </Form>\n        {payload ? (\n          <React.Fragment>\n            <List divided style={{ marginTop: \"22px\" }}>\n              {payload.map((item, i) => (\n                <List.Item key={i}>\n                  <List.Content floated=\"right\">\n                    <Button\n                      onClick={() => removeFromPayload(i)}\n                      size=\"mini\"\n                      color=\"red\"\n                      float=\"right\"\n                      icon=\"minus\"\n                    ></Button>\n                  </List.Content>\n                  <List.Content>\n                    <List.Header>{item.budget}</List.Header>\n                    <List.Description>\n                      {item.title}, ${item.amount}\n                    </List.Description>\n                    <List.Description>{item.date}</List.Description>\n                  </List.Content>\n                </List.Item>\n              ))}\n            </List>\n          </React.Fragment>\n        ) : null}\n        <Divider />\n        <Button compact size=\"big\" loading={loading} onClick={handleSave}>\n          <Icon name=\"save\" />\n          {saveButtonText}\n        </Button>\n      </Segment>\n    </Container>\n  )\n}\n",["105","106"],"/home/michael/Desktop/Projects/simple-budget-app/simplebudget-web-client/src/components/Dashboard.js",["107","108","109","110","111"],"import React from \"react\"\nimport { Container, Grid, Header, Button, Icon } from \"semantic-ui-react\"\nimport { Link, useHistory } from \"react-router-dom\"\nimport Reminder from \"./Reminder\"\n\nexport default ({ user }) => {\n  const date = new Date()\n  const year = date.getFullYear()\n  const month = date.getMonth()\n\n  return (\n    <Container>\n      <Header as=\"h2\" style={{ marginTop: \"25px\" }}>\n        {user ? `Welcome, ${user.firstName}` : null}\n      </Header>\n      <Grid padded stackable style={{ marginTop: \"50px\" }}>\n        <Grid.Column width={5}>\n          <Button\n            className=\"dashboard-btn\"\n            fluid\n            as={Link}\n            to=\"/budgets/new\"\n            raised\n            size=\"big\"\n          >\n            <Icon name=\"add\" style={{ color: \"mediumSeaGreen \" }} />\n            Create New Budget\n          </Button>\n        </Grid.Column>\n\n        <Grid.Column width={5}>\n          <Button\n            className=\"dashboard-btn\"\n            fluid\n            as={Link}\n            to=\"/budgets/manage\"\n            raised\n            size=\"big\"\n          >\n            <Icon name=\"edit\" style={{ color: \"indianRed \" }} />\n            Manage Budgets\n          </Button>\n        </Grid.Column>\n\n        <Grid.Column width={5}>\n          <Button\n            className=\"dashboard-btn\"\n            fluid\n            as={Link}\n            to=\"/expenditures/new\"\n            raised\n            size=\"big\"\n          >\n            <Icon name=\"dollar\" style={{ color: \"darkOrange \" }} />\n            Record Expenditures\n          </Button>\n        </Grid.Column>\n\n        <Grid.Column width={5}>\n          <Button\n            className=\"dashboard-btn\"\n            fluid\n            as={Link}\n            to=\"/bills\"\n            raised\n            size=\"big\"\n          >\n            <Icon name=\"chart pie\" style={{ color: \"darkOrchid \" }} />\n            Manage Bills\n          </Button>\n        </Grid.Column>\n\n        <Grid.Column width={5}>\n          <Button\n            className=\"dashboard-btn\"\n            fluid\n            as={Link}\n            to=\"/bills/new\"\n            raised\n            size=\"big\"\n          >\n            <Icon name=\"add\" style={{ color: \"mediumSeaGreen \" }} />\n            Record Bills\n          </Button>\n        </Grid.Column>\n\n        <Grid.Column width={5}>\n          <Button\n            className=\"dashboard-btn\"\n            fluid\n            as={Link}\n            to=\"/statistics\"\n            raised\n            size=\"big\"\n          >\n            <Icon name=\"chart bar\" style={{ color: \"mediumAquaMarine \" }} />\n            View Statistics\n          </Button>\n        </Grid.Column>\n\n        <Grid.Column width={5}>\n          <Button\n            className=\"dashboard-btn\"\n            fluid\n            as={Link}\n            to=\"/expenditures/view\"\n            raised\n            size=\"big\"\n          >\n            <Icon name=\"money\" style={{ color: \"dodgerBlue \" }} />\n            View Spending\n          </Button>\n        </Grid.Column>\n\n        <Grid.Column width={5}>\n          <Button\n            className=\"dashboard-btn\"\n            fluid\n            as={Link}\n            to=\"/settings\"\n            raised\n            size=\"big\"\n          >\n            <Icon name=\"setting\" style={{ color: \"salmon \" }} />\n            App Settings\n          </Button>\n        </Grid.Column>\n      </Grid>\n    </Container>\n  )\n}\n","/home/michael/Desktop/Projects/simple-budget-app/simplebudget-web-client/src/index.js",[],["112","113"],"/home/michael/Desktop/Projects/simple-budget-app/simplebudget-web-client/src/components/Settings.js",["114","115","116"],"import React, { useState } from \"react\"\nimport { Button, Container, Header, Segment } from \"semantic-ui-react\"\nimport ToggleSwitch from \"./ToggleSwitch\"\nimport Breadcrumb from \"./Breadcrumb\"\n\nexport default () => {\n  return (\n    <Container>\n      <Breadcrumb\n        sections={[\n          { name: \"Dashboard\", path: \"/\" },\n          { name: \"Settings\", path: \"/settings\" },\n        ]}\n      />\n      <Segment raised className=\"mt-2\" style={{ padding: \"35px\" }}>\n        <Header as=\"h2\">Application Settings</Header>\n        <section className=\"mt-2\">\n          <div>\n            <label>\n              <p>Show Pro Tips</p>\n              <ToggleSwitch />\n            </label>\n          </div>\n\n          <div style={{ marginTop: \"8px\" }}>\n            <label>\n              <p>Show Reminders</p>\n              <ToggleSwitch />\n            </label>\n          </div>\n\n          <div style={{ marginTop: \"8px\" }}>\n            <label>\n              <p>Dark Mode</p>\n              <ToggleSwitch />\n            </label>\n          </div>\n        </section>\n      </Segment>\n    </Container>\n  )\n}\n","/home/michael/Desktop/Projects/simple-budget-app/simplebudget-web-client/src/components/ViewBudget.js",["117"],"import React, { useState, useEffect } from \"react\"\nimport { useParams } from \"react-router-dom\"\nimport {\n  Container,\n  Dimmer,\n  Header,\n  List,\n  Loader,\n  Segment,\n} from \"semantic-ui-react\"\nimport Breadcrumb from \"./Breadcrumb\"\n\nexport default function BudgetView() {\n  const [budget, setBudget] = useState(\"\")\n  const [loading, setLoading] = useState(true)\n  const { id } = useParams()\n\n  useEffect(() => {\n    fetch(`http://localhost:5000/budget/${id}`)\n      .then((response) => response.json())\n      .then((data) => setBudget(data))\n      .finally(() => setLoading(false))\n  }, [])\n\n  if (loading) {\n    return (\n      <Dimmer active>\n        <Loader content=\"Loading...\" />\n      </Dimmer>\n    )\n  }\n\n  if (budget) {\n    return (\n      <Container>\n        <Breadcrumb\n          sections={[\n            { name: \"Dashboard\", path: \"/\" },\n            { name: \"Budgets\", path: \"/budgets/manage\" },\n            { name: budget.title, path: `/budgets/${id}` },\n          ]}\n        />\n        <Segment raised className=\"mt-2\" style={{ padding: \"35px\" }}>\n          <Header as=\"h1\">{budget.title}</Header>\n          <p>{budget.description}</p>\n          <List divided size=\"huge\">\n            {budget.Categories.map((category) => (\n              <List.Item key={category.id}>\n                <List.Content floated=\"right\">{category.amount}</List.Content>\n                <List.Content>{category.title}</List.Content>\n              </List.Item>\n            ))}\n            <List.Item key=\"last\" style={{ fontWeight: \"bold\" }}>\n              <List.Content floated=\"right\">\n                ${budget.total.toFixed(2)}\n              </List.Content>\n              <List.Content>Total</List.Content>\n            </List.Item>\n          </List>\n        </Segment>\n      </Container>\n    )\n  }\n}\n","/home/michael/Desktop/Projects/simple-budget-app/simplebudget-web-client/src/components/Login.js",["118","119"],"/home/michael/Desktop/Projects/simple-budget-app/simplebudget-web-client/src/reportWebVitals.js",[],["120","121"],"/home/michael/Desktop/Projects/simple-budget-app/simplebudget-web-client/src/components/ManageBudgets.js",["122","123","124"],"import React, { useState } from \"react\"\nimport { Link } from \"react-router-dom\"\nimport { Button, Container, Header, List, Segment } from \"semantic-ui-react\"\nimport Breadcrumb from \"./Breadcrumb\"\nimport ConfirmDeleteBudgetModal from \"./modals/ConfirmDeleteBudgetModal\"\n\nexport default ({ budgets, deleteBudget }) => {\n  const [loading, setLoading] = useState(false)\n  return (\n    <Container>\n      <Breadcrumb\n        sections={[\n          { name: \"Dashboard\", path: \"/\" },\n          { name: \"Budgets\", path: \"/budgets\" },\n          { name: \"Manage\", path: \"/budgets/manage\" },\n        ]}\n      />\n      <Segment raised className=\"mt-2\" style={{ padding: \"35px\" }}>\n        <Header as=\"h2\">Manage Budgets</Header>\n        <List divided relaxed className=\"mt-2\">\n          {budgets ? (\n            budgets.map((budget) => (\n              <List.Item style={{ marginBottom: \"12px\" }}>\n                <List.Content>\n                  <List.Content floated=\"right\">\n                    <Button\n                      as={Link}\n                      to={`/budgets/manage/${budget.id}/`}\n                      compact\n                      icon=\"edit\"\n                      color=\"green\"\n                    />\n                    <ConfirmDeleteBudgetModal\n                      deleteBudget={deleteBudget}\n                      budgetId={budget.id}\n                    />\n                  </List.Content>\n                  <List.Header as={Link} to={`/budgets/${budget.id}`}>\n                    {budget.title}\n                  </List.Header>\n                  <List.Description>{budget.description}</List.Description>\n                </List.Content>\n              </List.Item>\n            ))\n          ) : (\n            <React.Fragment>\n              <Header as=\"h5\">You have not yet created any budgets.</Header>\n              <Button as={Link} to=\"/budgets/new\">\n                Create New Budget\n              </Button>\n            </React.Fragment>\n          )}\n        </List>\n      </Segment>\n    </Container>\n  )\n}\n","/home/michael/Desktop/Projects/simple-budget-app/simplebudget-web-client/src/components/Signup.js",["125","126"],"import React, { useState } from \"react\"\nimport { useHistory, useLocation } from \"react-router-dom\"\nimport {\n  Button,\n  Container,\n  Divider,\n  Form,\n  Header,\n  Grid,\n  Message,\n} from \"semantic-ui-react\"\n\nexport default function SignUp() {\n  const params = {\n    firstName: false,\n    lastName: false,\n    email: false,\n    password: false,\n    confirmPassword: false,\n    netMonthlyIncome: false,\n    netMonthlyIncome: false,\n  }\n  const [firstName, setFirstName] = useState(\"\")\n  const [lastName, setLastName] = useState(\"\")\n  const [email, setEmail] = useState(\"\")\n  const [password, setPassword] = useState(\"\")\n  const [confirmPassword, setConfirmPassword] = useState(\"\")\n  const [netSalary, setNetSalary] = useState(\"\")\n  const [netMonthlyIncome, setNetMonthlyIncome] = useState(\"\")\n  const [error, setError] = useState(\"\")\n  const [validationErrors, setValidationErrors] = useState(params)\n  const [loading, setLoading] = useState(false)\n  const [queryParams, setQueryParams] = useState(\n    new URLSearchParams(useLocation().search)\n  )\n  const history = useHistory()\n\n  async function doSignUp() {\n    setLoading(true)\n    if (\n      firstName &&\n      email &&\n      password &&\n      confirmPassword &&\n      netSalary &&\n      netMonthlyIncome\n    ) {\n      const response = await fetch(\"http://localhost:5000/user/create\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          firstName,\n          lastName,\n          email,\n          password,\n          confirmPassword,\n          netSalary,\n          netMonthlyIncome,\n        }),\n      })\n      if (response.status !== 201) {\n        if (response.status === 500) {\n          setError(\n            \"Something went wrong. Check your internet connection or try again.\"\n          )\n        } else if (response.status === 401) {\n          setError(\"Your username or password is incorrect.\")\n        } else if (response.status === 400) {\n          await response.json().then((errors) => {\n            const messages = params\n            errors.errors.forEach(\n              (error) => (messages[error.param] = error.msg)\n            )\n            setValidationErrors(messages)\n          })\n        }\n        return setLoading(false)\n      }\n      history.push(\"/login?newsignup=true\")\n    }\n  }\n\n  return (\n    <Grid stretched relaxed fluid=\"true\" stackable className=\"mt-3\">\n      <Container>\n        {queryParams.get(\"delete_account\") ? (\n          <Message color=\"blue\">\n            We're sorry to see you go! Make a new account any time to manage\n            your spending.\n          </Message>\n        ) : null}\n        {error ? <Message color=\"red\">{error}</Message> : null}\n        <Header as=\"h1\">Sign Up</Header>\n        <Grid.Column className=\"mt-2\">\n          <Form>\n            <Form.Group widths=\"equal\">\n              <Form.Field error={validationErrors.firstName}>\n                <label>First Name</label>\n                <input\n                  fluid=\"true\"\n                  placeholder=\"First Name\"\n                  onChange={(e) => setFirstName(e.target.value)}\n                />\n                {validationErrors.firstName ? (\n                  <Message color=\"red\">{validationErrors.firstName}</Message>\n                ) : null}\n              </Form.Field>\n              <Form.Field error={validationErrors.lastName}>\n                <label>Last Name</label>\n                <input\n                  fluid=\"true\"\n                  placeholder=\"Last Name\"\n                  onChange={(e) => setLastName(e.target.value)}\n                />\n                {validationErrors.lastName ? (\n                  <Message color=\"red\">{validationErrors.lastName}</Message>\n                ) : null}\n              </Form.Field>\n            </Form.Group>\n            <Form.Field error={validationErrors.email}>\n              <label>Email</label>\n              <input\n                placeholder=\"Email address\"\n                onChange={(e) => setEmail(e.target.value)}\n              />\n              {validationErrors.email ? (\n                <Message color=\"red\">{validationErrors.email}</Message>\n              ) : null}\n            </Form.Field>\n            <Form.Field\n              error={\n                validationErrors.password || validationErrors.confirmPassword\n              }\n            >\n              <label>Password</label>\n              <input\n                placeholder=\"password\"\n                onChange={(e) => setPassword(e.target.value)}\n                type=\"password\"\n              />\n              {validationErrors.password ? (\n                <Message color=\"red\">{validationErrors.password}</Message>\n              ) : null}\n            </Form.Field>\n\n            <Form.Field error={validationErrors.confirmPassword}>\n              <label>Confirm Password</label>\n              <input\n                placeholder=\"confirm password\"\n                onChange={(e) => setConfirmPassword(e.target.value)}\n                type=\"password\"\n              />\n              {validationErrors.confirmPassword ? (\n                <Message color=\"red\">\n                  {validationErrors.confirmPassword}\n                </Message>\n              ) : null}\n            </Form.Field>\n            <Divider section />\n            <Header as=\"h3\">Financial Info</Header>\n            <Form.Group widths=\"equal\">\n              <Form.Field width={4} error={validationErrors.netSalary}>\n                <label>Net Salary</label>\n                <input\n                  onChange={(e) => setNetSalary(e.target.value)}\n                  value={netSalary}\n                  placeholder=\"Net salary\"\n                  type=\"number\"\n                />\n                {validationErrors.netSalary ? (\n                  <Message color=\"red\">{validationErrors.netSalary}</Message>\n                ) : null}\n              </Form.Field>\n              <Form.Field width={4} error={validationErrors.netMonthlyIncome}>\n                <label>Net Monthly Income</label>\n                <input\n                  onChange={(e) => setNetMonthlyIncome(e.target.value)}\n                  value={netMonthlyIncome}\n                  placeholder=\"Net monthly income\"\n                  type=\"number\"\n                />\n                {validationErrors.netMonthlyIncome ? (\n                  <Message color=\"red\">\n                    {validationErrors.netMonthlyIncome}\n                  </Message>\n                ) : null}\n              </Form.Field>\n            </Form.Group>\n\n            <Form.Field>\n              <Button primary loading={loading} onClick={doSignUp}>\n                Signup\n              </Button>\n            </Form.Field>\n          </Form>\n        </Grid.Column>\n      </Container>\n    </Grid>\n  )\n}\n","/home/michael/Desktop/Projects/simple-budget-app/simplebudget-web-client/src/components/EditBudget.js",["127","128","129"],"/home/michael/Desktop/Projects/simple-budget-app/simplebudget-web-client/src/components/Navbar.js",["130"],"import React from \"react\"\nimport { Menu, Container } from \"semantic-ui-react\"\nimport { NavLink } from \"react-router-dom\"\nimport ConfirmLogoutModal from \"./modals/ConfirmLogoutModal\"\n\nexport default ({ user, login, logout, darkmode }) => {\n  return (\n    <Menu inverted={!darkmode} style={{ borderRadius: \"0\" }}>\n      <Container>\n        <Menu.Item\n          as={NavLink}\n          to=\"/\"\n          exact\n          name={user ? \"dashboard\" : \"SimpleBudget\"}\n        />\n        {user ? (\n          <Menu.Item as={NavLink} to=\"/budgets/manage\" name=\"My Budgets\" />\n        ) : null}\n        <Menu.Menu position=\"right\">\n          {user ? (\n            <Menu.Item\n              as={NavLink}\n              to=\"/account\"\n              icon=\"user\"\n              name=\"Account\"\n            ></Menu.Item>\n          ) : null}\n          {!user ? <Menu.Item as={NavLink} to=\"/login\" name=\"login\" /> : null}\n          {user ? (\n            <ConfirmLogoutModal user={user} logout={logout} />\n          ) : (\n            <Menu.Item as={NavLink} to=\"/signup\" name=\"sign up\" />\n          )}\n        </Menu.Menu>\n      </Container>\n    </Menu>\n  )\n}\n","/home/michael/Desktop/Projects/simple-budget-app/simplebudget-web-client/src/components/ProTip.js",[],"/home/michael/Desktop/Projects/simple-budget-app/simplebudget-web-client/src/components/ViewStatistics.js",["131","132","133","134","135","136","137","138","139","140"],"import React, { useState } from \"react\"\nimport { Button, Container, Form, Header } from \"semantic-ui-react\"\n\nexport default function ViewStatistics() {\n  const [month, setMonth] = useState(new Date().getMonth())\n  const [year, setYear] = useState(new Date().getFullYear())\n  const [loading, setLoading] = useState(false)\n  const [error, setError] = useState(\"\")\n\n  return (\n    <Container>\n      <Header as=\"h1\" className=\"mt-2\">\n        Spending Statistics\n      </Header>\n    </Container>\n  )\n}\n","/home/michael/Desktop/Projects/simple-budget-app/simplebudget-web-client/src/components/Account.js",["141","142","143"],"import React, { Fragment, useEffect, useState } from \"react\"\nimport { useParams, useHistory } from \"react-router-dom\"\nimport AccountMenu from \"./AccountMenu\"\nimport AccountDetails from \"./AccountDetails\"\nimport FinancialProfile from \"./FinancialProfile\"\n\nexport default ({ user, deleteUser }) => {\n  const { slug } = useParams()\n  const history = useHistory()\n\n  if (!slug) {\n    history.push(\"/account/details\")\n  }\n\n  return (\n    <Fragment>\n      <AccountMenu />\n      {slug === \"details\" || !slug ? (\n        <AccountDetails user={user} deleteUser={deleteUser} />\n      ) : (\n        <FinancialProfile user={user} />\n      )}\n    </Fragment>\n  )\n}\n","/home/michael/Desktop/Projects/simple-budget-app/simplebudget-web-client/src/components/ManageBills.js",["144"],"/home/michael/Desktop/Projects/simple-budget-app/simplebudget-web-client/src/components/AddBill.js",["145","146","147"],"/home/michael/Desktop/Projects/simple-budget-app/simplebudget-web-client/src/components/Reminder.js",[],{"ruleId":"148","replacedBy":"149"},{"ruleId":"150","replacedBy":"151"},{"ruleId":"152","severity":1,"message":"153","line":1,"column":27,"nodeType":"154","messageId":"155","endLine":1,"endColumn":36},{"ruleId":"156","severity":1,"message":"157","line":95,"column":42,"nodeType":"158","messageId":"159","endLine":95,"endColumn":44},{"ruleId":"152","severity":1,"message":"160","line":24,"column":10,"nodeType":"154","messageId":"155","endLine":24,"endColumn":15},{"ruleId":"161","severity":1,"message":"162","line":34,"column":6,"nodeType":"163","endLine":34,"endColumn":9,"suggestions":"164"},{"ruleId":"161","severity":1,"message":"165","line":34,"column":7,"nodeType":"166","endLine":34,"endColumn":8},{"ruleId":"152","severity":1,"message":"167","line":50,"column":18,"nodeType":"154","messageId":"155","endLine":50,"endColumn":26},{"ruleId":"152","severity":1,"message":"168","line":21,"column":10,"nodeType":"154","messageId":"155","endLine":21,"endColumn":15},{"ruleId":"148","replacedBy":"169"},{"ruleId":"150","replacedBy":"170"},{"ruleId":"152","severity":1,"message":"171","line":3,"column":16,"nodeType":"154","messageId":"155","endLine":3,"endColumn":26},{"ruleId":"152","severity":1,"message":"172","line":4,"column":8,"nodeType":"154","messageId":"155","endLine":4,"endColumn":16},{"ruleId":"173","severity":1,"message":"174","line":6,"column":1,"nodeType":"175","endLine":131,"endColumn":2},{"ruleId":"152","severity":1,"message":"176","line":8,"column":9,"nodeType":"154","messageId":"155","endLine":8,"endColumn":13},{"ruleId":"152","severity":1,"message":"177","line":9,"column":9,"nodeType":"154","messageId":"155","endLine":9,"endColumn":14},{"ruleId":"148","replacedBy":"178"},{"ruleId":"150","replacedBy":"179"},{"ruleId":"152","severity":1,"message":"180","line":1,"column":17,"nodeType":"154","messageId":"155","endLine":1,"endColumn":25},{"ruleId":"152","severity":1,"message":"181","line":2,"column":10,"nodeType":"154","messageId":"155","endLine":2,"endColumn":16},{"ruleId":"173","severity":1,"message":"174","line":6,"column":1,"nodeType":"175","endLine":42,"endColumn":2},{"ruleId":"161","severity":1,"message":"182","line":23,"column":6,"nodeType":"163","endLine":23,"endColumn":8,"suggestions":"183"},{"ruleId":"152","severity":1,"message":"184","line":3,"column":8,"nodeType":"154","messageId":"155","endLine":3,"endColumn":15},{"ruleId":"152","severity":1,"message":"185","line":14,"column":23,"nodeType":"154","messageId":"155","endLine":14,"endColumn":37},{"ruleId":"148","replacedBy":"186"},{"ruleId":"150","replacedBy":"187"},{"ruleId":"173","severity":1,"message":"174","line":7,"column":1,"nodeType":"175","endLine":57,"endColumn":2},{"ruleId":"152","severity":1,"message":"188","line":8,"column":10,"nodeType":"154","messageId":"155","endLine":8,"endColumn":17},{"ruleId":"152","severity":1,"message":"189","line":8,"column":19,"nodeType":"154","messageId":"155","endLine":8,"endColumn":29},{"ruleId":"190","severity":1,"message":"191","line":21,"column":5,"nodeType":"192","messageId":"159","endLine":21,"endColumn":21},{"ruleId":"152","severity":1,"message":"185","line":33,"column":23,"nodeType":"154","messageId":"155","endLine":33,"endColumn":37},{"ruleId":"173","severity":1,"message":"174","line":13,"column":1,"nodeType":"175","endLine":71,"endColumn":2},{"ruleId":"152","severity":1,"message":"193","line":14,"column":18,"nodeType":"154","messageId":"155","endLine":14,"endColumn":27},{"ruleId":"152","severity":1,"message":"189","line":25,"column":19,"nodeType":"154","messageId":"155","endLine":25,"endColumn":29},{"ruleId":"173","severity":1,"message":"174","line":6,"column":1,"nodeType":"175","endLine":38,"endColumn":2},{"ruleId":"152","severity":1,"message":"181","line":2,"column":10,"nodeType":"154","messageId":"155","endLine":2,"endColumn":16},{"ruleId":"152","severity":1,"message":"194","line":2,"column":29,"nodeType":"154","messageId":"155","endLine":2,"endColumn":33},{"ruleId":"152","severity":1,"message":"177","line":5,"column":10,"nodeType":"154","messageId":"155","endLine":5,"endColumn":15},{"ruleId":"152","severity":1,"message":"195","line":5,"column":17,"nodeType":"154","messageId":"155","endLine":5,"endColumn":25},{"ruleId":"152","severity":1,"message":"176","line":6,"column":10,"nodeType":"154","messageId":"155","endLine":6,"endColumn":14},{"ruleId":"152","severity":1,"message":"196","line":6,"column":16,"nodeType":"154","messageId":"155","endLine":6,"endColumn":23},{"ruleId":"152","severity":1,"message":"188","line":7,"column":10,"nodeType":"154","messageId":"155","endLine":7,"endColumn":17},{"ruleId":"152","severity":1,"message":"189","line":7,"column":19,"nodeType":"154","messageId":"155","endLine":7,"endColumn":29},{"ruleId":"152","severity":1,"message":"168","line":8,"column":10,"nodeType":"154","messageId":"155","endLine":8,"endColumn":15},{"ruleId":"152","severity":1,"message":"197","line":8,"column":17,"nodeType":"154","messageId":"155","endLine":8,"endColumn":25},{"ruleId":"152","severity":1,"message":"153","line":1,"column":27,"nodeType":"154","messageId":"155","endLine":1,"endColumn":36},{"ruleId":"152","severity":1,"message":"180","line":1,"column":38,"nodeType":"154","messageId":"155","endLine":1,"endColumn":46},{"ruleId":"173","severity":1,"message":"174","line":7,"column":1,"nodeType":"175","endLine":25,"endColumn":2},{"ruleId":"152","severity":1,"message":"198","line":2,"column":37,"nodeType":"154","messageId":"155","endLine":2,"endColumn":41},{"ruleId":"152","severity":1,"message":"180","line":1,"column":17,"nodeType":"154","messageId":"155","endLine":1,"endColumn":25},{"ruleId":"152","severity":1,"message":"181","line":2,"column":10,"nodeType":"154","messageId":"155","endLine":2,"endColumn":16},{"ruleId":"152","severity":1,"message":"194","line":2,"column":29,"nodeType":"154","messageId":"155","endLine":2,"endColumn":33},"no-native-reassign",["199"],"no-negated-in-lhs",["200"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'bills' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'user'. Either include it or remove the dependency array.","ArrayExpression",["201"],"The 0 literal is not a valid dependency because it never changes. You can safely remove it.","Literal","'getBills' is defined but never used.","'error' is assigned a value but never used.",["199"],["200"],"'useHistory' is defined but never used.","'Reminder' is defined but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'year' is assigned a value but never used.","'month' is assigned a value but never used.",["199"],["200"],"'useState' is defined but never used.","'Button' is defined but never used.","React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.",["202"],"'Cookies' is defined but never used.","'setQueryParams' is assigned a value but never used.",["199"],["200"],"'loading' is assigned a value but never used.","'setLoading' is assigned a value but never used.","no-dupe-keys","Duplicate key 'netMonthlyIncome'.","ObjectExpression","'setBudget' is assigned a value but never used.","'Form' is defined but never used.","'setMonth' is assigned a value but never used.","'setYear' is assigned a value but never used.","'setError' is assigned a value but never used.","'List' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"203","fix":"204"},{"desc":"205","fix":"206"},"Update the dependencies array to be: [user]",{"range":"207","text":"208"},"Update the dependencies array to be: [id]",{"range":"209","text":"210"},[1304,1307],"[user]",[587,589],"[id]"]