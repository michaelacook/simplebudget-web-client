[{"/home/michael/Desktop/Projects/simple-budget-app/simplebudget-web-client/src/components/Signup.js":"1","/home/michael/Desktop/Projects/simple-budget-app/simplebudget-web-client/src/App.js":"2","/home/michael/Desktop/Projects/simple-budget-app/simplebudget-web-client/src/components/EditBudget.js":"3","/home/michael/Desktop/Projects/simple-budget-app/simplebudget-web-client/src/components/NewBudget.js":"4","/home/michael/Desktop/Projects/simple-budget-app/simplebudget-web-client/src/index.js":"5","/home/michael/Desktop/Projects/simple-budget-app/simplebudget-web-client/src/components/AddExpense.js":"6","/home/michael/Desktop/Projects/simple-budget-app/simplebudget-web-client/src/components/Login.js":"7","/home/michael/Desktop/Projects/simple-budget-app/simplebudget-web-client/src/components/ManageBudgets.js":"8","/home/michael/Desktop/Projects/simple-budget-app/simplebudget-web-client/src/components/modals/ConfirmDeleteCategory.js":"9","/home/michael/Desktop/Projects/simple-budget-app/simplebudget-web-client/src/reportWebVitals.js":"10","/home/michael/Desktop/Projects/simple-budget-app/simplebudget-web-client/src/components/Settings.js":"11","/home/michael/Desktop/Projects/simple-budget-app/simplebudget-web-client/src/components/EditExpenditure.js":"12","/home/michael/Desktop/Projects/simple-budget-app/simplebudget-web-client/src/components/Dashboard.js":"13","/home/michael/Desktop/Projects/simple-budget-app/simplebudget-web-client/src/components/Account.js":"14","/home/michael/Desktop/Projects/simple-budget-app/simplebudget-web-client/src/components/modals/ConfirmDeleteBudgetModal.js":"15","/home/michael/Desktop/Projects/simple-budget-app/simplebudget-web-client/src/components/Navbar.js":"16","/home/michael/Desktop/Projects/simple-budget-app/simplebudget-web-client/src/components/FinancialProfile.js":"17","/home/michael/Desktop/Projects/simple-budget-app/simplebudget-web-client/src/components/ViewSpending.js":"18","/home/michael/Desktop/Projects/simple-budget-app/simplebudget-web-client/src/components/modals/ConfirmDeleteExpenseModal.js":"19"},{"size":6718,"mtime":1610148067055,"results":"20","hashOfConfig":"21"},{"size":13030,"mtime":1610765287738,"results":"22","hashOfConfig":"21"},{"size":9798,"mtime":1610765366836,"results":"23","hashOfConfig":"21"},{"size":4853,"mtime":1610420397203,"results":"24","hashOfConfig":"21"},{"size":536,"mtime":1607203421724,"results":"25","hashOfConfig":"21"},{"size":4948,"mtime":1609297003940,"results":"26","hashOfConfig":"21"},{"size":1860,"mtime":1610496694544,"results":"27","hashOfConfig":"21"},{"size":1929,"mtime":1610765870800,"results":"28","hashOfConfig":"21"},{"size":582,"mtime":1610503374948,"results":"29","hashOfConfig":"21"},{"size":356,"mtime":1607203421724,"results":"30","hashOfConfig":"21"},{"size":1088,"mtime":1607203421724,"results":"31","hashOfConfig":"21"},{"size":4952,"mtime":1610848041947,"results":"32","hashOfConfig":"21"},{"size":3375,"mtime":1609365903685,"results":"33","hashOfConfig":"21"},{"size":673,"mtime":1609619690599,"results":"34","hashOfConfig":"21"},{"size":1132,"mtime":1610765536091,"results":"35","hashOfConfig":"21"},{"size":1133,"mtime":1608512039091,"results":"36","hashOfConfig":"21"},{"size":1995,"mtime":1610833402293,"results":"37","hashOfConfig":"21"},{"size":9099,"mtime":1610850482293,"results":"38","hashOfConfig":"21"},{"size":1142,"mtime":1610853200851,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"1b9p1l1",{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"42"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"57"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"60","messages":"61","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"68","messages":"69","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"70","messages":"71","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"72","messages":"73","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"74","messages":"75","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/michael/Desktop/Projects/simple-budget-app/simplebudget-web-client/src/components/Signup.js",[],["84","85"],"/home/michael/Desktop/Projects/simple-budget-app/simplebudget-web-client/src/App.js",["86","87"],"/home/michael/Desktop/Projects/simple-budget-app/simplebudget-web-client/src/components/EditBudget.js",["88","89"],"import React, { useState, useEffect } from \"react\"\nimport { useParams, useHistory } from \"react-router-dom\"\nimport {\n  Button,\n  Container,\n  Form,\n  Grid,\n  Header,\n  Icon,\n  Message,\n  Popup,\n  Segment,\n} from \"semantic-ui-react\"\nimport Breadcrumb from \"./Breadcrumb\"\nimport ConfirmDeleteCategory from \"./modals/ConfirmDeleteCategory\"\nimport ConfirmDeleteBudgetModal from \"./modals/ConfirmDeleteBudgetModal\"\nimport Cookies from \"js-cookie\"\n\nexport default function EditBudget({\n  user,\n  budgets,\n  setBudgets,\n  getBudget,\n  addNewCategory,\n  deleteCategory,\n  updateBudget,\n  deleteBudget,\n}) {\n  const [budget, setBudget] = useState([])\n  const [title, setTitle] = useState(\"\")\n  const [description, setDescription] = useState(\"\")\n  const [total, setTotal] = useState(0)\n  const [categories, setCategories] = useState([])\n  const [editedCategories, setEditedCategories] = useState([])\n  const [newCategories, setNewCategories] = useState([])\n  const [categoriesToDelete, setCategoriesToDelete] = useState([])\n  const [newCategoryTitle, setNewCategoryTitle] = useState(\"\")\n  const [newCategoryAmount, setNewCategoryAmount] = useState(\"\")\n  const [loading, setLoading] = useState(false)\n  const [error, setError] = useState(\"\")\n  const history = useHistory()\n  const { id } = useParams()\n\n  useEffect(() => {\n    getBudget(id)\n      .then((response) => response.json())\n      .then((data) => {\n        setBudget(data)\n        setTitle(data.title)\n        setDescription(data.description)\n        setTotal(Number(data.total))\n        setCategories(data.Categories)\n        setEditedCategories(data.Categories)\n      })\n      .catch((error) => setError(error))\n  }, [])\n\n  /**\n   * Reset state to initial\n   */\n  function reset() {\n    setTitle(budget.title)\n    setDescription(budget.description)\n    setTotal(budget.total)\n    setCategories(budget.Categories)\n    setEditedCategories(budget.Categories)\n    setNewCategories([])\n    setCategoriesToDelete([])\n    setNewCategoryTitle(\"\")\n    setNewCategoryAmount(\"\")\n    setError(\"\")\n  }\n\n  /**\n   * Add any new categories\n   * Delete any categories slated for delete\n   * Update budget properties\n   */\n  function handleSave() {\n    setLoading(true)\n    if (newCategories.length) {\n      for (let item of newCategories) {\n        addNewCategory(item)\n          .then((response) => response.json())\n          .then((data) => console.log(data))\n      }\n    }\n    if (categoriesToDelete.length) {\n      categoriesToDelete.forEach(async (id) => {\n        await deleteCategory(id)\n      })\n    }\n    const newCategoriesTotal = newCategories.reduce(\n      (acc, curr) => acc + Number(curr.amount),\n      0\n    )\n    const editedCategoriesTotal = editedCategories.reduce(\n      (acc, curr) => acc + Number(curr.amount),\n      0\n    )\n    const budgetTotal = newCategoriesTotal + editedCategoriesTotal\n    const payload = {\n      budget: {\n        title,\n        description,\n        total: budgetTotal,\n        userId: user.id,\n      },\n      categories: editedCategories,\n    }\n    updateBudget(budget.id, payload)\n      .then((response) => response.json())\n      .then((data) => {\n        data.Categories.forEach((category) => {\n          category.text = category.title\n          category.value = category.id\n        })\n        const oldState = [...budgets]\n        oldState.splice(\n          oldState.indexOf(oldState.find((item) => item.id === data.id)),\n          1,\n          data\n        )\n        setBudgets(oldState)\n        Cookies.set(\"budgets\", JSON.stringify(budgets))\n        setLoading(false)\n        history.push(`/budgets/${data.id}`)\n      })\n    setLoading(false)\n  }\n\n  function changeCategoryTitle(id, title) {\n    setError(\"\")\n    const category = editedCategories.find((cat) => cat.id === id)\n    const itemIndex = editedCategories.indexOf(category)\n    category.title = title\n    const newEditedCategoriesState = [...editedCategories]\n    newEditedCategoriesState[itemIndex] = category\n    setEditedCategories(newEditedCategoriesState)\n  }\n\n  function changeCategoryAmount(id, amount) {\n    setError(\"\")\n    const category = editedCategories.find((cat) => cat.id === id)\n    const itemIndex = editedCategories.indexOf(category)\n    category.amount = Number(amount)\n    const newEditedCategoriesState = [...editedCategories]\n    newEditedCategoriesState[itemIndex] = category\n    setEditedCategories(newEditedCategoriesState)\n  }\n\n  function addCategory() {\n    if (newCategoryTitle && newCategoryAmount) {\n      const newState = [...newCategories]\n      newState.push({\n        title: newCategoryTitle,\n        amount: newCategoryAmount,\n        budgetId: budget.id,\n      })\n      setNewCategories(newState)\n      setNewCategoryTitle(\"\")\n      setNewCategoryAmount(\"\")\n    }\n  }\n\n  function removeCategory(id) {\n    setError(\"\")\n    if (categories.length === 1) {\n      setError(\"Your budget must have at least one category.\")\n      return\n    }\n    const category = categories.find((cat) => cat.id === id)\n    const newCategoriesState = [...categories]\n    const itemIndex = categories.indexOf(category)\n    newCategoriesState.splice(itemIndex, 1)\n    setCategories(newCategoriesState)\n    setEditedCategories(newCategoriesState)\n    const newDeleteCategoryState = [...categoriesToDelete]\n    newDeleteCategoryState.push(category.id)\n    setCategoriesToDelete(newDeleteCategoryState)\n  }\n\n  return (\n    <Container>\n      <Breadcrumb\n        sections={[\n          { name: \"Manage Budgets\", path: \"/budgets/manage\" },\n          { name: budget.title, path: `/budgets/manage/${id}` },\n        ]}\n      />\n      <Grid columns={1}>\n        <Grid.Column>\n          <Segment raised style={{ padding: \"35px\", marginBottom: \"100px\" }}>\n            <Header as=\"h2\">Edit Budget</Header>\n            {error ? (\n              <Message color=\"red\" className=\"mt-1\">\n                {error}\n              </Message>\n            ) : null}\n            {budget ? (\n              <React.Fragment>\n                <Form className=\"mt-2\">\n                  <Form.Input\n                    label=\"Title\"\n                    value={title}\n                    onChange={(e) => setTitle(e.target.value)}\n                  />\n                  <Form.TextArea\n                    label=\"Description\"\n                    value={description}\n                    onChange={(e) => setDescription(e.target.value)}\n                  ></Form.TextArea>\n                  <Header as=\"h4\">Categories</Header>\n                  {categories\n                    ? categories.map((category) => (\n                        <Form.Group widths=\"equal\" key={category.id}>\n                          <Form.Input\n                            placeholder={category.title}\n                            onChange={(e) =>\n                              changeCategoryTitle(category.id, e.target.value)\n                            }\n                          />\n                          <Form.Input\n                            value={category.amount}\n                            onChange={(e) =>\n                              changeCategoryAmount(category.id, e.target.value)\n                            }\n                          />\n                          <ConfirmDeleteCategory\n                            onConfirm={() => removeCategory(category.id)}\n                            onCancel={null}\n                            buttonText={null}\n                            icon=\"trash\"\n                          />\n                        </Form.Group>\n                      ))\n                    : null}\n                  <Header as=\"h4\">New Category</Header>\n                  <Form.Group widths=\"equal\">\n                    <Form.Input\n                      placeholder=\"Title\"\n                      value={newCategoryTitle}\n                      onChange={(e) => setNewCategoryTitle(e.target.value)}\n                    />\n                    <Form.Input\n                      placeholder=\"Amount\"\n                      value={newCategoryAmount}\n                      onChange={(e) => setNewCategoryAmount(e.target.value)}\n                    />\n                    <Button icon=\"plus\" onClick={addCategory} />\n                  </Form.Group>\n                </Form>\n                <div className=\"mt-1\">\n                  {newCategories.map((item, i) => (\n                    <Button\n                      key={i}\n                      size=\"tiny\"\n                      icon\n                      labelPosition=\"right\"\n                      style={{ marginBottom: \"12px\" }}\n                      onClick={() =>\n                        setNewCategories(\n                          newCategories.filter((item, index) => i !== index)\n                        )\n                      }\n                    >\n                      {item.title} ${item.amount}\n                      <Icon name=\"minus\" />\n                    </Button>\n                  ))}\n                </div>\n                <Button onClick={handleSave} className=\"mt-1\" loading={loading}>\n                  <Icon name=\"save\" />\n                  Save\n                </Button>\n                <Popup\n                  content=\"Undo all changes\"\n                  trigger={\n                    <Button onClick={reset} className=\"mt-1\">\n                      <Icon name=\"refresh\" />\n                      Reset\n                    </Button>\n                  }\n                />\n                <Popup\n                  content=\"Delete this budget\"\n                  trigger={\n                    <ConfirmDeleteBudgetModal\n                      budgetId={budget.id}\n                      deleteBudget={deleteBudget}\n                    />\n                  }\n                />\n              </React.Fragment>\n            ) : null}\n          </Segment>\n        </Grid.Column>\n      </Grid>\n    </Container>\n  )\n}\n","/home/michael/Desktop/Projects/simple-budget-app/simplebudget-web-client/src/components/NewBudget.js",["90"],"import React, { useState } from \"react\"\nimport { useHistory } from \"react-router-dom\"\nimport {\n  Button,\n  Container,\n  Divider,\n  Form,\n  Header,\n  Icon,\n  Message,\n  Segment,\n} from \"semantic-ui-react\"\nimport Cookies from \"js-cookie\"\nimport Breadcrumb from \"./Breadcrumb\"\nimport ProTip from \"./ProTip\"\n\nexport default function NewBudget({ user, budgets, setBudgets, addBudget }) {\n  const [categories, setCategories] = useState([])\n  const [title, setTitle] = useState(\"\")\n  const [description, setDescription] = useState(\"\")\n  const [categoryName, setCategoryName] = useState(\"\")\n  const [categoryValue, setCategoryValue] = useState(\"\")\n  const [loading, setLoading] = useState(false)\n  const [error, setError] = useState()\n  const history = useHistory()\n\n  /**\n   * Add a category to state from form values\n   */\n  function addCategory() {\n    if (categoryName && categoryValue) {\n      const category = {}\n      category[categoryName] = categoryValue\n      setCategories([...categories, category])\n      setCategoryName(\"\")\n      setCategoryValue(\"\")\n    }\n  }\n\n  function doAddBudget() {\n    if (title && description && categories.length > 0) {\n      setLoading(true)\n      const payload = {\n        budget: {\n          title,\n          description,\n          total: categories.reduce(\n            (acc, curr) => acc + Number(Object.values(curr)[0]),\n            0\n          ),\n          userId: user.id,\n        },\n        categories,\n      }\n      console.log(payload)\n      addBudget(payload)\n        .then((response) => response.json())\n        .then((data) => {\n          // this is necessary so that categories can be viewed in select dropdowns\n          data.Categories.forEach((category) => {\n            category.text = category.title\n            category.value = category.id\n          })\n          setBudgets([...budgets, data])\n          Cookies.set(\"budgets\", JSON.stringify(data))\n          setLoading(false)\n          history.push(`/budgets/${data.id}`)\n        })\n    }\n  }\n\n  return (\n    <Container>\n      <Breadcrumb\n        color=\"blue\"\n        sections={[\n          { name: \"Dashboard\", path: \"/\" },\n          { name: \"Budgets\", path: \"/budgets/manage\" },\n          { name: \"New\", path: \"/budgets/new\" },\n        ]}\n      />\n\n      <ProTip\n        text=\"A budget should center on a theme (i.e, personal, side hustle, etc). You\n        can specify as many item categories as you want. To delete a budget\n        item, click it's button.\"\n      />\n\n      <Segment raised className=\"mt-2\" style={{ padding: \"35px\" }}>\n        {error ? <Message color=\"red\">{error}</Message> : null}\n        <Header as=\"h2\">Create Budget</Header>\n        <Form className=\"mt-1\" fluid>\n          <Form.Field width={15}>\n            <label>Title</label>\n            <Form.Input\n              placeholder=\"E.g My Personal Budget\"\n              value={title}\n              onChange={(e) => setTitle(e.target.value)}\n            ></Form.Input>\n          </Form.Field>\n          <Form.Field width={15}>\n            <Form.TextArea\n              label=\"Description\"\n              placeholder=\"E.g A budget to track my monthly bills and expenditures\"\n              value={description}\n              onChange={(e) => setDescription(e.target.value)}\n            ></Form.TextArea>\n          </Form.Field>\n          <Divider hidden />\n          <Header as=\"h3\">Categories</Header>\n          <Form.Group className=\"mt-1\">\n            <Form.Input\n              value={categoryName}\n              width={9}\n              label=\"Category Name\"\n              placeholder=\"E.g Groceries\"\n              onChange={(e) => setCategoryName(e.target.value)}\n            ></Form.Input>\n            <Form.Input\n              value={categoryValue}\n              width={3}\n              label=\"Amount\"\n              placeholder=\"E.g 340.50\"\n              onChange={(e) => setCategoryValue(e.target.value)}\n            ></Form.Input>\n          </Form.Group>\n          <Button color=\"green\" size=\"tiny\" onClick={() => addCategory()}>\n            <Icon name=\"plus\" />\n            Add\n          </Button>\n          <div className=\"mt-1\">\n            {categories.map((item, i) => (\n              <Button\n                key={i}\n                size=\"tiny\"\n                icon\n                labelPosition=\"right\"\n                style={{ marginBottom: \"12px\" }}\n                onClick={() =>\n                  setCategories(categories.filter((item, index) => i !== index))\n                }\n              >\n                {Object.keys(item)[0]} ${Object.values(item)[0]}\n                <Icon name=\"minus\" color=\"red\" />\n              </Button>\n            ))}\n          </div>\n          <Divider hidden />\n          <Button loading={loading} onClick={() => doAddBudget()} size=\"big\">\n            Done\n          </Button>\n        </Form>\n      </Segment>\n    </Container>\n  )\n}\n",["91","92"],"/home/michael/Desktop/Projects/simple-budget-app/simplebudget-web-client/src/index.js",[],"/home/michael/Desktop/Projects/simple-budget-app/simplebudget-web-client/src/components/AddExpense.js",["93"],"import React, { useState } from \"react\"\nimport {\n  Button,\n  Container,\n  Divider,\n  Form,\n  Header,\n  Icon,\n  List,\n  Segment,\n} from \"semantic-ui-react\"\nimport Breadcrumb from \"./Breadcrumb\"\n\nexport default function AddExpense(props) {\n  const [amount, setAmount] = useState(\"\")\n  const [budget, setBudget] = useState(\"\")\n  const [category, setCategory] = useState(\"\")\n  const [date, setDate] = useState(\"\")\n  const [loading, setLoading] = useState(false)\n  const [payload, setPayload] = useState([])\n  const [error, setError] = useState(\"\")\n  const [saveButtonText, setSaveButtonText] = useState(\"Save\")\n\n  const budgetTitles = props.budgets.map((budget) => {\n    return {\n      key: budget.id,\n      text: budget.title,\n      value: budget.title,\n    }\n  })\n\n  /**\n   * Handle click to save expenditures\n   */\n  function handleSave() {\n    setLoading(true)\n    props\n      .addExpenditure(payload)\n      .then(() => {\n        setLoading(false)\n        setAmount(\"\")\n        setDate(\"\")\n        setPayload([])\n        setSaveButtonText(\"Saved!\")\n      })\n      .catch((error) => setError(error))\n  }\n\n  /**\n   * Set budget state based on budget dropdown value\n   * @param {Object} data\n   */\n  function handleBudgetDropdownChange(data) {\n    setBudget(props.budgets.find((budget) => budget.title === data.value))\n  }\n\n  /**\n   * Add a category to state\n   * @param {Object} data - select element data\n   */\n  function handleSetCategory(data) {\n    const categoryId = data.value\n    const category = budget.Categories.find(\n      (category) => category.id === categoryId\n    )\n    setCategory(category)\n  }\n\n  /**\n   * Add a new expenditure to the http payload\n   */\n  function addToPayload() {\n    const newPayLoad = payload\n    const [year, month, day] = date.split(\"-\")\n    newPayLoad.push({\n      userId: props.user.id,\n      budgetId: budget.id,\n      categoryId: category.id,\n      title: category.title,\n      amount,\n      date,\n      year,\n      month,\n      day,\n    })\n    setPayload(newPayLoad)\n    setAmount(\"\")\n  }\n\n  /**\n   * Remove an expenditure from state\n   * @param {Number} i - expenditure index\n   */\n  function removeFromPayload(i) {\n    const newPayload = payload.filter((item, index) => index !== i)\n    setPayload(newPayload)\n  }\n\n  return (\n    <Container>\n      <Breadcrumb\n        sections={[\n          { name: \"Dashboard\", path: \"/\" },\n          { name: \"Expenditures\", path: \"/expenditures\" },\n          { name: \"New\", path: \"/expenditures/new\" },\n        ]}\n      />\n      <Segment raised className=\"mt-2\" style={{ padding: \"35px\" }}>\n        <Header as=\"h2\">Add Expenses</Header>\n        <Form className=\"mt-1\">\n          <Form.Group widths=\"equal\">\n            <Form.Input\n              fluid\n              type=\"date\"\n              label=\"Date\"\n              value={date}\n              onChange={(e, data) => setDate(data.value)}\n            />\n            <Form.Select\n              fluid\n              label=\"Budget\"\n              options={budgetTitles}\n              placeholder=\"Budget\"\n              onChange={(e, data) => handleBudgetDropdownChange(data)}\n            ></Form.Select>\n            <Form.Select\n              fluid\n              label=\"Category\"\n              options={budget.Categories}\n              placeholder=\"Category\"\n              onChange={(e, data) => handleSetCategory(data)}\n            ></Form.Select>\n            <Form.Input\n              fluid\n              label=\"Amount\"\n              placeholder=\"E.g 25.56\"\n              value={amount}\n              onChange={(e) => setAmount(e.target.value)}\n            ></Form.Input>\n          </Form.Group>\n          <Button color=\"green\" size=\"tiny\" onClick={addToPayload}>\n            <Icon name=\"plus\" />\n            Add\n          </Button>\n        </Form>\n        {payload ? (\n          <React.Fragment>\n            <List divided style={{ marginTop: \"22px\" }}>\n              {payload.map((item, i) => (\n                <List.Item key={i}>\n                  <List.Content floated=\"right\">\n                    <Button\n                      onClick={() => removeFromPayload(i)}\n                      size=\"mini\"\n                      color=\"red\"\n                      float=\"right\"\n                      icon=\"minus\"\n                    ></Button>\n                  </List.Content>\n                  <List.Content>\n                    <List.Header>{item.budget}</List.Header>\n                    <List.Description>\n                      {item.title}, ${item.amount}\n                    </List.Description>\n                    <List.Description>{item.date}</List.Description>\n                  </List.Content>\n                </List.Item>\n              ))}\n            </List>\n          </React.Fragment>\n        ) : null}\n        <Divider />\n        <Button compact size=\"big\" loading={loading} onClick={handleSave}>\n          <Icon name=\"save\" />\n          {saveButtonText}\n        </Button>\n      </Segment>\n    </Container>\n  )\n}\n",["94","95"],"/home/michael/Desktop/Projects/simple-budget-app/simplebudget-web-client/src/components/Login.js",["96","97"],"/home/michael/Desktop/Projects/simple-budget-app/simplebudget-web-client/src/components/ManageBudgets.js",["98","99","100"],"/home/michael/Desktop/Projects/simple-budget-app/simplebudget-web-client/src/components/modals/ConfirmDeleteCategory.js",["101"],"/home/michael/Desktop/Projects/simple-budget-app/simplebudget-web-client/src/reportWebVitals.js",[],"/home/michael/Desktop/Projects/simple-budget-app/simplebudget-web-client/src/components/Settings.js",["102","103","104"],"/home/michael/Desktop/Projects/simple-budget-app/simplebudget-web-client/src/components/EditExpenditure.js",["105","106"],"/home/michael/Desktop/Projects/simple-budget-app/simplebudget-web-client/src/components/Dashboard.js",["107","108","109","110","111"],"/home/michael/Desktop/Projects/simple-budget-app/simplebudget-web-client/src/components/Account.js",["112","113","114"],"/home/michael/Desktop/Projects/simple-budget-app/simplebudget-web-client/src/components/modals/ConfirmDeleteBudgetModal.js",["115","116","117"],"/home/michael/Desktop/Projects/simple-budget-app/simplebudget-web-client/src/components/Navbar.js",["118"],"/home/michael/Desktop/Projects/simple-budget-app/simplebudget-web-client/src/components/FinancialProfile.js",["119"],"/home/michael/Desktop/Projects/simple-budget-app/simplebudget-web-client/src/components/ViewSpending.js",["120"],"/home/michael/Desktop/Projects/simple-budget-app/simplebudget-web-client/src/components/modals/ConfirmDeleteExpenseModal.js",["121"],{"ruleId":"122","replacedBy":"123"},{"ruleId":"124","replacedBy":"125"},{"ruleId":"126","severity":1,"message":"127","line":42,"column":6,"nodeType":"128","endLine":42,"endColumn":9,"suggestions":"129"},{"ruleId":"126","severity":1,"message":"130","line":42,"column":7,"nodeType":"131","endLine":42,"endColumn":8},{"ruleId":"132","severity":1,"message":"133","line":32,"column":10,"nodeType":"134","messageId":"135","endLine":32,"endColumn":15},{"ruleId":"126","severity":1,"message":"136","line":56,"column":6,"nodeType":"128","endLine":56,"endColumn":8,"suggestions":"137"},{"ruleId":"132","severity":1,"message":"138","line":24,"column":17,"nodeType":"134","messageId":"135","endLine":24,"endColumn":25},{"ruleId":"122","replacedBy":"139"},{"ruleId":"124","replacedBy":"140"},{"ruleId":"132","severity":1,"message":"141","line":21,"column":10,"nodeType":"134","messageId":"135","endLine":21,"endColumn":15},{"ruleId":"122","replacedBy":"142"},{"ruleId":"124","replacedBy":"143"},{"ruleId":"132","severity":1,"message":"144","line":3,"column":8,"nodeType":"134","messageId":"135","endLine":3,"endColumn":15},{"ruleId":"132","severity":1,"message":"145","line":14,"column":23,"nodeType":"134","messageId":"135","endLine":14,"endColumn":37},{"ruleId":"146","severity":1,"message":"147","line":7,"column":1,"nodeType":"148","endLine":55,"endColumn":2},{"ruleId":"132","severity":1,"message":"149","line":8,"column":10,"nodeType":"134","messageId":"135","endLine":8,"endColumn":17},{"ruleId":"132","severity":1,"message":"150","line":8,"column":19,"nodeType":"134","messageId":"135","endLine":8,"endColumn":29},{"ruleId":"132","severity":1,"message":"151","line":2,"column":27,"nodeType":"134","messageId":"135","endLine":2,"endColumn":31},{"ruleId":"132","severity":1,"message":"152","line":1,"column":17,"nodeType":"134","messageId":"135","endLine":1,"endColumn":25},{"ruleId":"132","severity":1,"message":"153","line":2,"column":10,"nodeType":"134","messageId":"135","endLine":2,"endColumn":16},{"ruleId":"146","severity":1,"message":"147","line":6,"column":1,"nodeType":"148","endLine":42,"endColumn":2},{"ruleId":"132","severity":1,"message":"141","line":31,"column":10,"nodeType":"134","messageId":"135","endLine":31,"endColumn":15},{"ruleId":"126","severity":1,"message":"154","line":50,"column":6,"nodeType":"128","endLine":50,"endColumn":8,"suggestions":"155"},{"ruleId":"132","severity":1,"message":"156","line":3,"column":16,"nodeType":"134","messageId":"135","endLine":3,"endColumn":26},{"ruleId":"132","severity":1,"message":"157","line":4,"column":8,"nodeType":"134","messageId":"135","endLine":4,"endColumn":16},{"ruleId":"146","severity":1,"message":"147","line":6,"column":1,"nodeType":"148","endLine":131,"endColumn":2},{"ruleId":"132","severity":1,"message":"158","line":8,"column":9,"nodeType":"134","messageId":"135","endLine":8,"endColumn":13},{"ruleId":"132","severity":1,"message":"159","line":9,"column":9,"nodeType":"134","messageId":"135","endLine":9,"endColumn":14},{"ruleId":"132","severity":1,"message":"160","line":1,"column":27,"nodeType":"134","messageId":"135","endLine":1,"endColumn":36},{"ruleId":"132","severity":1,"message":"152","line":1,"column":38,"nodeType":"134","messageId":"135","endLine":1,"endColumn":46},{"ruleId":"146","severity":1,"message":"147","line":7,"column":1,"nodeType":"148","endLine":25,"endColumn":2},{"ruleId":"132","severity":1,"message":"152","line":1,"column":17,"nodeType":"134","messageId":"135","endLine":1,"endColumn":25},{"ruleId":"132","severity":1,"message":"161","line":2,"column":18,"nodeType":"134","messageId":"135","endLine":2,"endColumn":24},{"ruleId":"146","severity":1,"message":"147","line":4,"column":1,"nodeType":"148","endLine":45,"endColumn":2},{"ruleId":"146","severity":1,"message":"147","line":6,"column":1,"nodeType":"148","endLine":38,"endColumn":2},{"ruleId":"132","severity":1,"message":"162","line":2,"column":45,"nodeType":"134","messageId":"135","endLine":2,"endColumn":49},{"ruleId":"126","severity":1,"message":"163","line":114,"column":6,"nodeType":"128","endLine":114,"endColumn":8,"suggestions":"164"},{"ruleId":"132","severity":1,"message":"152","line":1,"column":17,"nodeType":"134","messageId":"135","endLine":1,"endColumn":25},"no-native-reassign",["165"],"no-negated-in-lhs",["166"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'getBills', 'getBudgets', and 'user'. Either include them or remove the dependency array.","ArrayExpression",["167"],"The 0 literal is not a valid dependency because it never changes. You can safely remove it.","Literal","no-unused-vars","'total' is assigned a value but never used.","Identifier","unusedVar","React Hook useEffect has missing dependencies: 'getBudget' and 'id'. Either include them or remove the dependency array. If 'getBudget' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["168"],"'setError' is assigned a value but never used.",["165"],["166"],"'error' is assigned a value but never used.",["165"],["166"],"'Cookies' is defined but never used.","'setQueryParams' is assigned a value but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'loading' is assigned a value but never used.","'setLoading' is assigned a value but never used.","'Icon' is defined but never used.","'useState' is defined but never used.","'Button' is defined but never used.","React Hook useEffect has missing dependencies: 'budgets', 'getExpenditure', and 'id'. Either include them or remove the dependency array. If 'getExpenditure' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["169"],"'useHistory' is defined but never used.","'Reminder' is defined but never used.","'year' is assigned a value but never used.","'month' is assigned a value but never used.","'useEffect' is defined but never used.","'Header' is defined but never used.","'List' is defined but never used.","React Hook useEffect has missing dependencies: 'getExpenditures' and 'state'. Either include them or remove the dependency array. If 'getExpenditures' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["170"],"no-global-assign","no-unsafe-negation",{"desc":"171","fix":"172"},{"desc":"173","fix":"174"},{"desc":"175","fix":"176"},{"desc":"177","fix":"178"},"Update the dependencies array to be: [getBills, getBudgets, user]",{"range":"179","text":"180"},"Update the dependencies array to be: [getBudget, id]",{"range":"181","text":"182"},"Update the dependencies array to be: [budgets, getExpenditure, id]",{"range":"183","text":"184"},"Update the dependencies array to be: [getExpenditures, state]",{"range":"185","text":"186"},[1538,1541],"[getBills, getBudgets, user]",[1667,1669],"[getBudget, id]",[1466,1468],"[budgets, getExpenditure, id]",[3005,3007],"[getExpenditures, state]"]